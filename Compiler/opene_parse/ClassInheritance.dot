digraph G {
	rankdir=LR;
	node[shape=box];

	# Class inheritance link.
	"opene::SourceFile" -> "opene::Node"
	"opene::ProgramSetFile" -> "opene::SourceFile"
	"opene::GlobalVariableFile" -> "opene::SourceFile"
	"opene::DataStructureFile" -> "opene::SourceFile"
	"opene::DllDefineFile" -> "opene::SourceFile"
	"opene::Decl" -> "opene::Node"
	"opene::TagDecl" -> "opene::Decl"
	"opene::BaseVariDecl" -> "opene::TagDecl"
	"opene::ParameterDecl" -> "opene::BaseVariDecl"
	"opene::VariableDecl" -> "opene::BaseVariDecl"
	"opene::GlobalVariableDecl" -> "opene::VariableDecl"
	"opene::MemberVariableDecl" -> "opene::VariableDecl"
	"opene::FileVariableDecl" -> "opene::VariableDecl"
	"opene::LocalVariableDecl" -> "opene::VariableDecl"
	"opene::TypeDecl" -> "opene::TagDecl"
	"opene::BuiltinTypeDecl" -> "opene::TypeDecl"
	"opene::StructureDecl" -> "opene::TypeDecl"
	"opene::ArrayDecl" -> "opene::TypeDecl"
	"opene::FunctorDecl" -> "opene::TagDecl"
	"opene::FunctionDecl" -> "opene::FunctorDecl"
	"opene::DllCommandDecl" -> "opene::FunctorDecl"
	"opene::ProgSetDecl" -> "opene::TagDecl"
	"opene::Statement" -> "opene::Node"
	"opene::AssignStmt" -> "opene::Statement"
	"opene::IfStmt" -> "opene::Statement"
	"opene::LoopStatement" -> "opene::Statement"
	"opene::WhileStmt" -> "opene::LoopStatement"
	"opene::RangeForStmt" -> "opene::LoopStatement"
	"opene::ForStmt" -> "opene::LoopStatement"
	"opene::DoWhileStmt" -> "opene::LoopStatement"
	"opene::StatementBlock" -> "opene::Statement"
	"opene::Expression" -> "opene::Statement"
	"opene::HierarchyIdentifier" -> "opene::Expression"
	"opene::NameComponent" -> "opene::Expression"
	"opene::FunctionCall" -> "opene::Expression"
	"opene::_OperatorExpression" -> "opene::Expression"
	"opene::UnaryExpression" -> "opene::_OperatorExpression"
	"opene::BinaryExpression" -> "opene::_OperatorExpression"
	"opene::Value" -> "opene::Expression"
	"opene::ValueOfDataSet" -> "opene::Value"
	"opene::ValueOfDatetime" -> "opene::Value"
	"opene::ResourceRefExpression" -> "opene::Expression"
	"opene::FuncAddrExpression" -> "opene::Expression"
	"opene::ValueOfBool" -> "opene::Value"
	"opene::ValueOfDecimal" -> "opene::Value"
	"opene::ValueOfString" -> "opene::Value"
	"opene::TranslateUnit" -> "opene::Node"
	"opene::Node"[shape=ellipse fillcolor=gold style=filled];
}
