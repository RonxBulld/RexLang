digraph G {
    rankdir=LR;
    node[shape=box];
    "SourceFile" -> "Node";
    "IdentDef" -> "Node";
    "Decl" -> "Node";
    "Statement" -> "Node";
    "TranslateUnit" -> "Node";
    "ProgramSetFile" -> "SourceFile";
    "GlobalVariableFile" -> "SourceFile";
    "DataStructureFile" -> "SourceFile";
    "APIDeclareFile" -> "SourceFile";
    "ConstDeclareFile" -> "SourceFile";
    "TagDecl" -> "Decl";
    "BaseVariDecl" -> "TagDecl";
    "ConstDecl" -> "TagDecl";
    "TypeDecl" -> "TagDecl";
    "ProgSetDecl" -> "TagDecl";
    "ParameterDecl" -> "BaseVariDecl";
    "VariableDecl" -> "BaseVariDecl";
    "GlobalVariableDecl" -> "VariableDecl";
    "MemberVariableDecl" -> "VariableDecl";
    "FileVariableDecl" -> "VariableDecl";
    "LocalVariableDecl" -> "VariableDecl";
    "VariTypeDecl" -> "TypeDecl";
    "FunctorDecl" -> "TypeDecl";
    "ReferenceType" -> "VariTypeDecl";
    "BuiltinTypeDecl" -> "VariTypeDecl";
    "StructureDecl" -> "VariTypeDecl";
    "ArrayDecl" -> "VariTypeDecl";
    "BuiltinVoidType" -> "BuiltinTypeDecl";
    "BuiltinCommonType" -> "BuiltinTypeDecl";
    "BuiltinCharType" -> "BuiltinTypeDecl";
    "BuiltinIntegerType" -> "BuiltinTypeDecl";
    "BuiltinFloatType" -> "BuiltinTypeDecl";
    "BuiltinBoolType" -> "BuiltinTypeDecl";
    "BuiltinStringType" -> "BuiltinTypeDecl";
    "BuiltinDataSetType" -> "BuiltinTypeDecl";
    "BuiltinShortType" -> "BuiltinTypeDecl";
    "BuiltinLongType" -> "BuiltinTypeDecl";
    "BuiltinDatetimeType" -> "BuiltinTypeDecl";
    "BuiltinFuncPtrType" -> "BuiltinTypeDecl";
    "BuiltinDoubleType" -> "BuiltinTypeDecl";
    "FunctionDecl" -> "FunctorDecl";
    "APICommandDecl" -> "FunctorDecl";
    "AssignStmt" -> "Statement";
    "ControlStmt" -> "Statement";
    "IfStmt" -> "Statement";
    "LoopStatement" -> "Statement";
    "StatementBlock" -> "Statement";
    "Expression" -> "Statement";
    "LoopControlStmt" -> "ControlStmt";
    "ReturnStmt" -> "ControlStmt";
    "ExitStmt" -> "ControlStmt";
    "ContinueStmt" -> "LoopControlStmt";
    "BreakStmt" -> "LoopControlStmt";
    "WhileStmt" -> "LoopStatement";
    "RangeForStmt" -> "LoopStatement";
    "ForStmt" -> "LoopStatement";
    "DoWhileStmt" -> "LoopStatement";
    "HierarchyIdentifier" -> "Expression";
    "NameComponent" -> "Expression";
    "TypeConvert" -> "Expression";
    "_OperatorExpression" -> "Expression";
    "FuncAddrExpression" -> "Expression";
    "Value" -> "Expression";
    "IdentRefer" -> "NameComponent";
    "ArrayIndex" -> "NameComponent";
    "FunctionCall" -> "NameComponent";
    "UnaryExpression" -> "_OperatorExpression";
    "BinaryExpression" -> "_OperatorExpression";
    "ValueOfDataSet" -> "Value";
    "ValueOfDatetime" -> "Value";
    "ValueOfBool" -> "Value";
    "ValueOfDecimal" -> "Value";
    "ValueOfString" -> "Value";

    "Node"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">Node</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">* setParent(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">* setChild(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getTranslateUnit(...) -&gt; TranslateUnit *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getAstContext(...) -&gt; ASTContext *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getNearstScope(...) -&gt; Node *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getParent(...) -&gt; Node *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ setLocation(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getFileName(...) -&gt; const char *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getLeftLine(...) -&gt; size_t</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getLeftColumn(...) -&gt; size_t</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getRightLine(...) -&gt; size_t</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getRightColumn(...) -&gt; size_t</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ findDeclWithNameString(...) -&gt; TagDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- node_id_ : size_t</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- ast_context_ : ASTContext *</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- parent_scope_ : Node *</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- parent_node_ : Node *</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- node_type_ : NodeType</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- location_start_ : size_t</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- location_end_ : size_t</td></tr>
        </table>>
    ];
    "SourceFile"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">SourceFile</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ isProgramSetFile(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ isGlobalVariableFile(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ isDataStructureFile(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ isAPIDeclareFile(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ isConstDeclareFile(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ registResourceTo(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
        </table>>
    ];
    "ProgramSetFile"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">ProgramSetFile</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isProgramSetFile(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ registResourceTo(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ appendReferenceLibName(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ appendProgramSetDecl(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getProgramSetDecl(...) -&gt; ProgSetDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getRefLibs(...) -&gt; const vector&lt;TString&gt; &amp;</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- libraries_ : vector&lt;TString&gt;</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- program_set_declares_ : ProgSetDecl *</td></tr>
        </table>>
    ];
    "GlobalVariableFile"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">GlobalVariableFile</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ appendGlobalVariableDecl(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getGlobalVariMap(...) -&gt; const GlobalVariableFile::GlobalVariMapTy &amp;</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isGlobalVariableFile(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ registResourceTo(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- global_variable_map_ : GlobalVariableFile::GlobalVariMapTy</td></tr>
        </table>>
    ];
    "DataStructureFile"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">DataStructureFile</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ appendStructureDecl(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getTypes(...) -&gt; const DataStructureFile::StructDeclMapTy &amp;</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isDataStructureFile(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ registResourceTo(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- structure_decl_map_ : DataStructureFile::StructDeclMapTy</td></tr>
        </table>>
    ];
    "APIDeclareFile"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">APIDeclareFile</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ appendAPIDeclare(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getAPIDefMap(...) -&gt; const APIDeclareFile::DllDefMapTy &amp;</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isAPIDeclareFile(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ registResourceTo(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- api_declares_ : APIDeclareFile::DllDefMapTy</td></tr>
        </table>>
    ];
    "ConstDeclareFile"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">ConstDeclareFile</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ appendConstDeclare(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getConstDeclMap(...) -&gt; const ConstDeclareFile::ConstDeclMapTy &amp;</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isConstDeclareFile(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ registResourceTo(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- consts_declares_ : ConstDeclareFile::ConstDeclMapTy</td></tr>
        </table>>
    ];
    "IdentDef"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">IdentDef</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ name(...) -&gt; const char *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ decl(...) -&gt; TagDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ addReference(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ removeReference(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getReferenceTable(...) -&gt; set&lt;IdentRefer *&gt; &amp;</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- id_ : StringRef</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- reference_table_ : set&lt;IdentRefer *&gt;</td></tr>
        </table>>
    ];
    "Decl"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">Decl</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ applyAttribute(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ applyAttributes(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ setAccessLevel(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getAccessLevel(...) -&gt; AccessLevel</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getType(...) -&gt; TypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- access_level_ : AccessLevel</td></tr>
        </table>>
    ];
    "TagDecl"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">TagDecl</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getName(...) -&gt; IdentDef *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getNameStr(...) -&gt; const char *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ setComment(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getComment(...) -&gt; const TString &amp;</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getCommentStr(...) -&gt; const char *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getReferenceTable(...) -&gt; set&lt;IdentRefer *&gt; &amp;</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ addReference(...) -&gt; int</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ removeReference(...) -&gt; int</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- name_ : IdentDef *</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- comment_ : TString</td></tr>
        </table>>
    ];
    "BaseVariDecl"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">BaseVariDecl</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ updateType(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ getType(...) -&gt; TypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ id(...) -&gt; IdentRefer *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ type(...) -&gt; VariTypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- type_name_ : IdentRefer *</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- type_ : VariTypeDecl *</td></tr>
        </table>>
    ];
    "ParameterDecl"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">ParameterDecl</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ applyAttribute(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ isDynamicParam(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ enableReference(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getParamIndex(...) -&gt; int</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ isNullable(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ isArray(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ shouldBeReference(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- is_nullable_ : _Bool</td></tr>
        </table>>
    ];
    "ConstDecl"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">ConstDecl</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getValue(...) -&gt; Value *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- const_value_ : Value *</td></tr>
        </table>>
    ];
    "VariableDecl"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">VariableDecl</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
        </table>>
    ];
    "GlobalVariableDecl"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">GlobalVariableDecl</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
        </table>>
    ];
    "MemberVariableDecl"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">MemberVariableDecl</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ applyAttribute(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ shouldBeReference(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ indexOfStruct(...) -&gt; int</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
        </table>>
    ];
    "FileVariableDecl"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">FileVariableDecl</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
        </table>>
    ];
    "LocalVariableDecl"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">LocalVariableDecl</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ applyAttribute(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ isStatic(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- is_static_ : _Bool</td></tr>
        </table>>
    ];
    "TypeDecl"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">TypeDecl</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ getType(...) -&gt; TypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ isVoidType(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ isCommonType(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ isCharType(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ isIntegerType(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ isFloatType(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ isBoolType(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ isStringType(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ isDataSetType(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ isShortType(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ isLongType(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ isDatetimeType(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ isFuncPtrType(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ isDoubleType(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ isStructType(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ isExtendBooleanType(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ isNumerical(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ isIntegerCategory(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ isArrayType(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ isFunctionType(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ isAPICommandType(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ isCallable(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ isIndexable(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ isFixedDimensions(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ evalIndexedElementTy(...) -&gt; TypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getDimensions(...) -&gt; vector&lt;size_t&gt;</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ compareTo(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ isUnyOptValid(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ isBinOptValid(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ isAssginValidFrom(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
        </table>>
    ];
    "VariTypeDecl"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">VariTypeDecl</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getArrayToWithDimStr(...) -&gt; ArrayDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
        </table>>
    ];
    "ReferenceType"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">ReferenceType</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ get(...) -&gt; ReferenceType *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ get(...) -&gt; ReferenceType *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getPointee(...) -&gt; TypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- type_name_ : IdentRefer *</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- pointee_type_ : TypeDecl *</td></tr>
        </table>>
    ];
    "BuiltinTypeDecl"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">BuiltinTypeDecl</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetBuiltinType(...) -&gt; EnumOfBuiltinType</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isExtendBooleanType(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isNumerical(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isIntegerCategory(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetTypeText(...) -&gt; const char *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
        </table>>
    ];
    "BuiltinVoidType"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">BuiltinVoidType</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ GetBuiltinType(...) -&gt; EnumOfBuiltinType</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isVoidType(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ GetTypeText(...) -&gt; const char *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ BuiltinType(...) -&gt; EnumOfBuiltinType</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ TypeText(...) -&gt; const char *</td></tr>
        </table>>
    ];
    "BuiltinCommonType"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">BuiltinCommonType</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ GetBuiltinType(...) -&gt; EnumOfBuiltinType</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isCommonType(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ GetTypeText(...) -&gt; const char *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ BuiltinType(...) -&gt; EnumOfBuiltinType</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ TypeText(...) -&gt; const char *</td></tr>
        </table>>
    ];
    "BuiltinCharType"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">BuiltinCharType</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ GetBuiltinType(...) -&gt; EnumOfBuiltinType</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isCharType(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ GetTypeText(...) -&gt; const char *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isBinOptValid(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isUnyOptValid(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ BuiltinType(...) -&gt; EnumOfBuiltinType</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ TypeText(...) -&gt; const char *</td></tr>
        </table>>
    ];
    "BuiltinIntegerType"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">BuiltinIntegerType</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ GetBuiltinType(...) -&gt; EnumOfBuiltinType</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isIntegerType(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ GetTypeText(...) -&gt; const char *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isBinOptValid(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isUnyOptValid(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ BuiltinType(...) -&gt; EnumOfBuiltinType</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ TypeText(...) -&gt; const char *</td></tr>
        </table>>
    ];
    "BuiltinFloatType"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">BuiltinFloatType</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ GetBuiltinType(...) -&gt; EnumOfBuiltinType</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isFloatType(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ GetTypeText(...) -&gt; const char *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isBinOptValid(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isUnyOptValid(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ BuiltinType(...) -&gt; EnumOfBuiltinType</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ TypeText(...) -&gt; const char *</td></tr>
        </table>>
    ];
    "BuiltinBoolType"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">BuiltinBoolType</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ GetBuiltinType(...) -&gt; EnumOfBuiltinType</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isBoolType(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ GetTypeText(...) -&gt; const char *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isBinOptValid(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ BuiltinType(...) -&gt; EnumOfBuiltinType</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ TypeText(...) -&gt; const char *</td></tr>
        </table>>
    ];
    "BuiltinStringType"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">BuiltinStringType</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ GetBuiltinType(...) -&gt; EnumOfBuiltinType</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isStringType(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ GetTypeText(...) -&gt; const char *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isIndexable(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isFixedDimensions(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ getDimensions(...) -&gt; vector&lt;size_t&gt;</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isBinOptValid(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ evalIndexedElementTy(...) -&gt; TypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ BuiltinType(...) -&gt; EnumOfBuiltinType</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ TypeText(...) -&gt; const char *</td></tr>
        </table>>
    ];
    "BuiltinDataSetType"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">BuiltinDataSetType</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ GetBuiltinType(...) -&gt; EnumOfBuiltinType</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isDataSetType(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ GetTypeText(...) -&gt; const char *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isIndexable(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isFixedDimensions(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ getDimensions(...) -&gt; vector&lt;size_t&gt;</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isBinOptValid(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ evalIndexedElementTy(...) -&gt; TypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ BuiltinType(...) -&gt; EnumOfBuiltinType</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ TypeText(...) -&gt; const char *</td></tr>
        </table>>
    ];
    "BuiltinShortType"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">BuiltinShortType</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ GetBuiltinType(...) -&gt; EnumOfBuiltinType</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isShortType(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ GetTypeText(...) -&gt; const char *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isBinOptValid(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isUnyOptValid(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ BuiltinType(...) -&gt; EnumOfBuiltinType</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ TypeText(...) -&gt; const char *</td></tr>
        </table>>
    ];
    "BuiltinLongType"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">BuiltinLongType</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ GetBuiltinType(...) -&gt; EnumOfBuiltinType</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isLongType(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ GetTypeText(...) -&gt; const char *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isBinOptValid(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isUnyOptValid(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ BuiltinType(...) -&gt; EnumOfBuiltinType</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ TypeText(...) -&gt; const char *</td></tr>
        </table>>
    ];
    "BuiltinDatetimeType"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">BuiltinDatetimeType</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ GetBuiltinType(...) -&gt; EnumOfBuiltinType</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isDatetimeType(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ GetTypeText(...) -&gt; const char *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isBinOptValid(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ BuiltinType(...) -&gt; EnumOfBuiltinType</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ TypeText(...) -&gt; const char *</td></tr>
        </table>>
    ];
    "BuiltinFuncPtrType"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">BuiltinFuncPtrType</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ GetBuiltinType(...) -&gt; EnumOfBuiltinType</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isFuncPtrType(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ GetTypeText(...) -&gt; const char *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isBinOptValid(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ BuiltinType(...) -&gt; EnumOfBuiltinType</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ TypeText(...) -&gt; const char *</td></tr>
        </table>>
    ];
    "BuiltinDoubleType"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">BuiltinDoubleType</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ GetBuiltinType(...) -&gt; EnumOfBuiltinType</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isDoubleType(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ GetTypeText(...) -&gt; const char *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isBinOptValid(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isUnyOptValid(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ BuiltinType(...) -&gt; EnumOfBuiltinType</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ TypeText(...) -&gt; const char *</td></tr>
        </table>>
    ];
    "StructureDecl"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">StructureDecl</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isBinOptValid(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isStructType(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ appendElement(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getElementWithIndex(...) -&gt; BaseVariDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getElementWithName(...) -&gt; BaseVariDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ isMemberOfThis(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ indexMemberOfThis(...) -&gt; int</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- members_ : NamedOrderDict&lt;MemberVariableDecl *&gt;</td></tr>
        </table>>
    ];
    "ArrayDecl"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">ArrayDecl</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isIndexable(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isFixedDimensions(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isArrayType(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ evalIndexedElementTy(...) -&gt; TypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ getDimensions(...) -&gt; vector&lt;size_t&gt;</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isBinOptValid(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ get(...) -&gt; ArrayDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ get(...) -&gt; ArrayDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- base_type_ : TypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- dimensions_ : vector&lt;size_t&gt;</td></tr>
        </table>>
    ];
    "FunctorDecl"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">FunctorDecl</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isCallable(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isAssginValidFrom(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ appendParameter(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getParameters(...) -&gt; vector&lt;ParameterDecl *&gt; &amp;</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getParameterAt(...) -&gt; ParameterDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getParamByName(...) -&gt; ParameterDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getIndexOf(...) -&gt; int</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getReturnType(...) -&gt; TypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ isDynamicArgs(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ isStaticLibraryAPI(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ isDynamicLibraryAPI(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- return_type_ : IdentRefer *</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- parameters_ : vector&lt;ParameterDecl *&gt;</td></tr>
        </table>>
    ];
    "FunctionDecl"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">FunctionDecl</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ appendLocalVariable(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ setStatementBlock(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getLocalVari(...) -&gt; LocalVariableDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getParameter(...) -&gt; ParameterDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getFunctionBody(...) -&gt; StatementBlock *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isStaticLibraryAPI(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isDynamicLibraryAPI(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isFunctionType(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ findDeclWithNameString(...) -&gt; TagDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- local_vari_ : NamedOrderDict&lt;LocalVariableDecl *&gt;</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- statement_list_ : StatementBlock *</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- super_set_ : ProgSetDecl *</td></tr>
        </table>>
    ];
    "APICommandDecl"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">APICommandDecl</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ setLibraryName(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getLibraryName(...) -&gt; const TString &amp;</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ setLibraryType(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getLibraryType(...) -&gt; LibraryType</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getApiName(...) -&gt; IdentDef *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ setApiNameRef(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getArguPassModel(...) -&gt; ArgumentPassModel</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ setArguPassModel(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isStaticLibraryAPI(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isDynamicLibraryAPI(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ isAPICommandType(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- library_file_ : TString</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- library_type_ : LibraryType</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- api_name_ : IdentDef *</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- argument_pass_model_ : ArgumentPassModel</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- mapping_names_ : vector&lt;StringRef&gt;</td></tr>
        </table>>
    ];
    "ProgSetDecl"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">ProgSetDecl</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ appendFileStaticVari(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ appendFunctionDecl(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getFileVariableDecl(...) -&gt; FileVariableDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getFunctionDecl(...) -&gt; FunctionDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getFuncSignatures(...) -&gt; vector&lt;FunctorDecl *&gt;</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ findDeclWithNameString(...) -&gt; TagDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ getType(...) -&gt; TypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- file_static_variables_ : NamedOrderDict&lt;FileVariableDecl *&gt;</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- function_decls_ : NamedOrderDict&lt;FunctionDecl *&gt;</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- signature_of_functions_ : NamedOrderDict&lt;FunctorDecl *&gt;</td></tr>
        </table>>
    ];
    "Statement"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">Statement</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">* getSubExprAccessType(...) -&gt; ExprUsage</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
        </table>>
    ];
    "AssignStmt"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">AssignStmt</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">*^ getSubExprAccessType(...) -&gt; ExprUsage</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ setLHS(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ setRHS(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getLHS(...) -&gt; HierarchyIdentifier *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getRHS(...) -&gt; Expression *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- lhs_ : HierarchyIdentifier *</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- rhs_ : Expression *</td></tr>
        </table>>
    ];
    "ControlStmt"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">ControlStmt</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
        </table>>
    ];
    "LoopControlStmt"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">LoopControlStmt</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ setControlledLoop(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getControlledLoop(...) -&gt; LoopStatement *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- controlled_loop_ : LoopStatement *</td></tr>
        </table>>
    ];
    "ContinueStmt"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">ContinueStmt</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">*^ getSubExprAccessType(...) -&gt; ExprUsage</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
        </table>>
    ];
    "BreakStmt"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">BreakStmt</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">*^ getSubExprAccessType(...) -&gt; ExprUsage</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
        </table>>
    ];
    "ReturnStmt"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">ReturnStmt</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">*^ getSubExprAccessType(...) -&gt; ExprUsage</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ setReturnValue(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getReturnValue(...) -&gt; Expression *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- return_value_ : Expression *</td></tr>
        </table>>
    ];
    "ExitStmt"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">ExitStmt</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">*^ getSubExprAccessType(...) -&gt; ExprUsage</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
        </table>>
    ];
    "IfStmt"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">IfStmt</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">*^ getSubExprAccessType(...) -&gt; ExprUsage</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ appendBranch(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ setDefault(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ branchesCount(...) -&gt; size_t</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ conditionAt(...) -&gt; Expression *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ branchBodyAt(...) -&gt; Statement *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ defaultBody(...) -&gt; Statement *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- switches_ : vector&lt;pair&lt;Expression *, Statement *&gt; &gt;</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- default_statement_ : Statement *</td></tr>
        </table>>
    ];
    "LoopStatement"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">LoopStatement</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ setLoopBody(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getLoopBody(...) -&gt; Statement *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- loop_body_ : Statement *</td></tr>
        </table>>
    ];
    "WhileStmt"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">WhileStmt</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">*^ getSubExprAccessType(...) -&gt; ExprUsage</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ setLoopCondition(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getLoopCondition(...) -&gt; Expression *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- condition_ : Expression *</td></tr>
        </table>>
    ];
    "RangeForStmt"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">RangeForStmt</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">*^ getSubExprAccessType(...) -&gt; ExprUsage</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ setRangeSize(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ setLoopVariable(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getRangeSize(...) -&gt; Expression *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getLoopVari(...) -&gt; HierarchyIdentifier *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- range_size_ : Expression *</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- loop_vari_ : HierarchyIdentifier *</td></tr>
        </table>>
    ];
    "ForStmt"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">ForStmt</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">*^ getSubExprAccessType(...) -&gt; ExprUsage</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ setStartValue(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ setStopValue(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ setStepValue(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ setLoopVari(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getStartValue(...) -&gt; Expression *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getStopValue(...) -&gt; Expression *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getStepValue(...) -&gt; Expression *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getLoopVari(...) -&gt; HierarchyIdentifier *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- start_value_ : Expression *</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- stop_value_ : Expression *</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- step_value_ : Expression *</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- loop_vari_ : HierarchyIdentifier *</td></tr>
        </table>>
    ];
    "DoWhileStmt"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">DoWhileStmt</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">*^ getSubExprAccessType(...) -&gt; ExprUsage</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ setCondition(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getCondition(...) -&gt; Expression *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- condition_ : Expression *</td></tr>
        </table>>
    ];
    "StatementBlock"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">StatementBlock</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">*^ getSubExprAccessType(...) -&gt; ExprUsage</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ appendStatement(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getStatements(...) -&gt; const vector&lt;Statement *&gt; &amp;</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- statements_ : vector&lt;Statement *&gt;</td></tr>
        </table>>
    ];
    "Expression"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">Expression</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">* CheckExpressionInternal(...) -&gt; TypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">* getExpressionTypeInternal(...) -&gt; TypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ CheckExpression(...) -&gt; TypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getExpressionType(...) -&gt; TypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getExpressionType(...) -&gt; TypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getLRType(...) -&gt; ExprUsage</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ isLeftUsage(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ isRightUsage(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ castTo(...) -&gt; Expression *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- expression_type_ : TypeDecl *</td></tr>
        </table>>
    ];
    "HierarchyIdentifier"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">HierarchyIdentifier</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">*^ CheckExpressionInternal(...) -&gt; TypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">*^ getSubExprAccessType(...) -&gt; ExprUsage</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">*^ getExpressionTypeInternal(...) -&gt; TypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ AppendComponent(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- name_components_ : vector&lt;NameComponent *&gt;</td></tr>
        </table>>
    ];
    "NameComponent"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">NameComponent</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ SetForward(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ SetBackward(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ Forward(...) -&gt; NameComponent *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ Backward(...) -&gt; NameComponent *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ EvalBaseNameComponentType(...) -&gt; TagDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getBaseId(...) -&gt; IdentRefer *</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- forward_name_component_ : NameComponent *</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- backward_name_component_ : NameComponent *</td></tr>
        </table>>
    ];
    "IdentRefer"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">IdentRefer</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">*^ CheckExpressionInternal(...) -&gt; TypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">*^ getSubExprAccessType(...) -&gt; ExprUsage</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">*^ getExpressionTypeInternal(...) -&gt; TypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ def(...) -&gt; IdentDef *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getName(...) -&gt; const StringRef &amp;</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ EvalBaseNameComponentType(...) -&gt; TagDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ getBaseId(...) -&gt; IdentRefer *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getDecl(...) -&gt; TagDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- reference_ : IdentDef *</td></tr>
        </table>>
    ];
    "ArrayIndex"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">ArrayIndex</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">*^ CheckExpressionInternal(...) -&gt; TypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">*^ getSubExprAccessType(...) -&gt; ExprUsage</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">*^ getExpressionTypeInternal(...) -&gt; TypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ setBaseComponent(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ setIndexExpr(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ EvalBaseNameComponentType(...) -&gt; TagDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getIndexBase(...) -&gt; NameComponent *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getElementTy(...) -&gt; TypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ getBaseId(...) -&gt; IdentRefer *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getIndexesList(...) -&gt; ErrOr&lt;vector&lt;Expression *&gt; &gt;</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- base_ : NameComponent *</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- index_ : Expression *</td></tr>
        </table>>
    ];
    "FunctionCall"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">FunctionCall</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">*^ CheckExpressionInternal(...) -&gt; TypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">*^ getSubExprAccessType(...) -&gt; ExprUsage</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">*^ getExpressionTypeInternal(...) -&gt; TypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ EvalBaseNameComponentType(...) -&gt; TagDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ getBaseId(...) -&gt; IdentRefer *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ matchFunctor(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ setCallName(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ appendArgument(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getCallee(...) -&gt; NameComponent *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getFunctionDeclare(...) -&gt; FunctorDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getArgumentsCount(...) -&gt; size_t</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getArgumentAt(...) -&gt; Expression *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getArguments(...) -&gt; vector&lt;Expression *&gt; &amp;</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ isArgument(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ isArgument(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ indexOfArgument(...) -&gt; int</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ indexOfArgument(...) -&gt; int</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- function_name_ : NameComponent *</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- arguments_ : vector&lt;Expression *&gt;</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- functor_declare_ : FunctorDecl *</td></tr>
        </table>>
    ];
    "TypeConvert"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">TypeConvert</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">*^ CheckExpressionInternal(...) -&gt; TypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">*^ getExpressionTypeInternal(...) -&gt; TypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ getSubExprAccessType(...) -&gt; ExprUsage</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getSourceExpr(...) -&gt; Expression *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getSourceType(...) -&gt; TypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getTargetType(...) -&gt; TypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- convert_type_ : TypeConvert::ConvertType</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- from_expression_ : Expression *</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- target_type_ : TypeDecl *</td></tr>
        </table>>
    ];
    "_OperatorExpression"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">_OperatorExpression</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ setOperatorText(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ setOperator(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ setOperator(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getOperator(...) -&gt; const OperatorType &amp;</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- operator_type_ : OperatorType</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- operator_ : TString</td></tr>
        </table>>
    ];
    "UnaryExpression"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">UnaryExpression</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">*^ CheckExpressionInternal(...) -&gt; VariTypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">*^ getSubExprAccessType(...) -&gt; ExprUsage</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">*^ getExpressionTypeInternal(...) -&gt; TypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ setOperand(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- operand_value_ : Expression *</td></tr>
        </table>>
    ];
    "BinaryExpression"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">BinaryExpression</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">*^ CheckExpressionInternal(...) -&gt; VariTypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">*^ getSubExprAccessType(...) -&gt; ExprUsage</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">*^ getExpressionTypeInternal(...) -&gt; TypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ setLHS(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ setRHS(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ isBinaryOperateValid(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getBinaryOperateUpgradeType(...) -&gt; VariTypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- lhs_ : Expression *</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- rhs_ : Expression *</td></tr>
        </table>>
    ];
    "FuncAddrExpression"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">FuncAddrExpression</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">*^ CheckExpressionInternal(...) -&gt; TypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">*^ getExpressionTypeInternal(...) -&gt; TypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ setRefFuncName(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ getSubExprAccessType(...) -&gt; ExprUsage</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- function_name_ : IdentRefer *</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- functor_declare_ : FunctorDecl *</td></tr>
        </table>>
    ];
    "Value"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">Value</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">*^ getSubExprAccessType(...) -&gt; ExprUsage</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
        </table>>
    ];
    "ValueOfDataSet"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">ValueOfDataSet</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">*^ CheckExpressionInternal(...) -&gt; TypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">*^ getExpressionTypeInternal(...) -&gt; TypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ appendElement(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- elements_ : vector&lt;Expression *&gt;</td></tr>
        </table>>
    ];
    "ValueOfDatetime"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">ValueOfDatetime</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">*^ CheckExpressionInternal(...) -&gt; TypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">*^ getExpressionTypeInternal(...) -&gt; TypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ setTime(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- time_ : time_t</td></tr>
        </table>>
    ];
    "ValueOfBool"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">ValueOfBool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">*^ CheckExpressionInternal(...) -&gt; TypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">*^ getExpressionTypeInternal(...) -&gt; TypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ setBool(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- value_ : _Bool</td></tr>
        </table>>
    ];
    "ValueOfDecimal"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">ValueOfDecimal</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">*^ CheckExpressionInternal(...) -&gt; TypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">*^ getExpressionTypeInternal(...) -&gt; TypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ setIntValue(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ setFloatValue(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">-  : union ValueOfDecimal::(anonymous at /mnt/d/Project/RexLang/Compiler/rexlang_compiler/NodeDecl.h:1938:9)</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- type_ : type</td></tr>
        </table>>
    ];
    "ValueOfString"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">ValueOfString</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">*^ CheckExpressionInternal(...) -&gt; TypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">*^ getExpressionTypeInternal(...) -&gt; TypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ setStringLiteral(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- string_literal_ : TString</td></tr>
        </table>>
    ];
    "TranslateUnit"
    [
        shape=none
        label=<<table border="0" cellspacing="0">
            <tr><td port="head" border="1" bgcolor="pink">TranslateUnit</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">- setMainEnrty(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ sematicAnalysisInternal(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ appendSourceFile(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ merge(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ addFunctor(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ addProgSet(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ addType(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ addGlobalVari(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ addConstVal(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ addRefLib(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ addPlaceholder(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getType(...) -&gt; TypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getGlobalVari(...) -&gt; GlobalVariableDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getFunctor(...) -&gt; FunctorDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getConst(...) -&gt; ConstDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getOrCreateType(...) -&gt; TypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ setSourceEdition(...) -&gt; void</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getSourceEdition(...) -&gt; unsigned int</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getReferenceLibraries(...) -&gt; const set&lt;TString&gt; &amp;</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getMainEntry(...) -&gt; FunctorDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">- RegistBuiltinType(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ InitBuiltinTypes(...) -&gt; _Bool</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getBuiltinTy(...) -&gt; BuiltinTypeDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getVoidTy(...) -&gt; BuiltinVoidType *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getCommonTy(...) -&gt; BuiltinCommonType *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getCharTy(...) -&gt; BuiltinCharType *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getIntegerTy(...) -&gt; BuiltinIntegerType *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getFloatTy(...) -&gt; BuiltinFloatType *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getBoolTy(...) -&gt; BuiltinBoolType *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getStringTy(...) -&gt; BuiltinStringType *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getDataSetTy(...) -&gt; BuiltinDataSetType *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getShortTy(...) -&gt; BuiltinShortType *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getLongTy(...) -&gt; BuiltinLongType *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getDatetimeTy(...) -&gt; BuiltinDatetimeType *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getFuncPtrTy(...) -&gt; BuiltinFuncPtrType *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ getDoubleTy(...) -&gt; BuiltinDoubleType *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+^ findDeclWithNameString(...) -&gt; TagDecl *</td></tr>
            <tr><td border="1" bgcolor="AliceBlue">+ GetClassId(...) -&gt; const NodeType</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- edition_ : unsigned int</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- source_files_ : vector&lt;SourceFile *&gt;</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- global_type_ : NamedOrderDict&lt;TypeDecl *&gt;</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- global_variables_ : NamedOrderDict&lt;GlobalVariableDecl *&gt;</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- libraries_list_ : set&lt;TString&gt;</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- functor_declares_ : NamedOrderDict&lt;FunctorDecl *&gt;</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- consts_declares_ : NamedOrderDict&lt;ConstDecl *&gt;</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- program_sets_ : NamedOrderDict&lt;ProgSetDecl *&gt;</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- placeholders_ : NamedOrderDict&lt;IdentDef *&gt;</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- main_entry_ : FunctorDecl *</td></tr>
            <tr><td border="1" bgcolor="AntiqueWhite">- builtin_type_map_ : ordered_map&lt;EnumOfBuiltinType, BuiltinTypeDecl *&gt;</td></tr>
        </table>>
    ];
}
