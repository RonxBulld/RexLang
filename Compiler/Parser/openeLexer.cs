//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/Project/OpenELanguage/Compiler\opene.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class openeLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, VERSION=3, LIBRARY=4, PROGRAM_SET=5, PROGRAM_SET_VARIABLE=6, 
		SUB_PROGRAM=7, DIGIT=8, FILENAME=9, IDENTIFIER=10, WHITESPACE=11, NEWLINE=12;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "VERSION", "LIBRARY", "PROGRAM_SET", "PROGRAM_SET_VARIABLE", 
		"SUB_PROGRAM", "DIGIT", "FILENAME", "IDENTIFIER", "WHITESPACE", "NEWLINE"
	};


	public openeLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public openeLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "','", "'\"'", "'.\u7248\u672C'", "'.\u652F\u6301\u5E93'", "'.\u7A0B\u5E8F\u96C6'", 
		"'.\u7A0B\u5E8F\u96C6\u53D8\u91CF'", "'.\u5B50\u7A0B\u5E8F'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "VERSION", "LIBRARY", "PROGRAM_SET", "PROGRAM_SET_VARIABLE", 
		"SUB_PROGRAM", "DIGIT", "FILENAME", "IDENTIFIER", "WHITESPACE", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "opene.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static openeLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\xE', 'V', '\b', '\x1', '\x4', '\x2', '\t', '\x2', '\x4', 
		'\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', 
		'\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', 
		'\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', 
		'\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x6', '\t', ';', 
		'\n', '\t', '\r', '\t', '\xE', '\t', '<', '\x3', '\n', '\x6', '\n', '@', 
		'\n', '\n', '\r', '\n', '\xE', '\n', '\x41', '\x3', '\v', '\x6', '\v', 
		'\x45', '\n', '\v', '\r', '\v', '\xE', '\v', '\x46', '\x3', '\f', '\x6', 
		'\f', 'J', '\n', '\f', '\r', '\f', '\xE', '\f', 'K', '\x3', '\f', '\x3', 
		'\f', '\x3', '\r', '\x5', '\r', 'Q', '\n', '\r', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x2', '\x2', '\xE', '\x3', '\x3', '\x5', '\x4', 
		'\a', '\x5', '\t', '\x6', '\v', '\a', '\r', '\b', '\xF', '\t', '\x11', 
		'\n', '\x13', '\v', '\x15', '\f', '\x17', '\r', '\x19', '\xE', '\x3', 
		'\x2', '\x5', '\x6', '\x2', '\x32', ';', '\x43', '\\', '\x61', '\x61', 
		'\x63', '|', '\b', '\x2', '\x32', ';', '\x43', '\\', '\x61', '\x61', '\x63', 
		'|', '\x4E02', '\x9FA7', '\xF902', '\xFA2F', '\x4', '\x2', '\v', '\v', 
		'\"', '\"', '\x2', 'Z', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', '\x13', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x17', '\x3', '\x2', '\x2', '\x2', '\x2', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '\x3', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x5', '\x1D', 
		'\x3', '\x2', '\x2', '\x2', '\a', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\t', '#', '\x3', '\x2', '\x2', '\x2', '\v', '(', '\x3', '\x2', '\x2', 
		'\x2', '\r', '-', '\x3', '\x2', '\x2', '\x2', '\xF', '\x34', '\x3', '\x2', 
		'\x2', '\x2', '\x11', ':', '\x3', '\x2', '\x2', '\x2', '\x13', '?', '\x3', 
		'\x2', '\x2', '\x2', '\x15', '\x44', '\x3', '\x2', '\x2', '\x2', '\x17', 
		'I', '\x3', '\x2', '\x2', '\x2', '\x19', 'P', '\x3', '\x2', '\x2', '\x2', 
		'\x1B', '\x1C', '\a', '.', '\x2', '\x2', '\x1C', '\x4', '\x3', '\x2', 
		'\x2', '\x2', '\x1D', '\x1E', '\a', '$', '\x2', '\x2', '\x1E', '\x6', 
		'\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\a', '\x30', '\x2', '\x2', ' ', 
		'!', '\a', '\x724A', '\x2', '\x2', '!', '\"', '\a', '\x672E', '\x2', '\x2', 
		'\"', '\b', '\x3', '\x2', '\x2', '\x2', '#', '$', '\a', '\x30', '\x2', 
		'\x2', '$', '%', '\a', '\x6531', '\x2', '\x2', '%', '&', '\a', '\x6303', 
		'\x2', '\x2', '&', '\'', '\a', '\x5E95', '\x2', '\x2', '\'', '\n', '\x3', 
		'\x2', '\x2', '\x2', '(', ')', '\a', '\x30', '\x2', '\x2', ')', '*', '\a', 
		'\x7A0D', '\x2', '\x2', '*', '+', '\a', '\x5E91', '\x2', '\x2', '+', ',', 
		'\a', '\x96C8', '\x2', '\x2', ',', '\f', '\x3', '\x2', '\x2', '\x2', '-', 
		'.', '\a', '\x30', '\x2', '\x2', '.', '/', '\a', '\x7A0D', '\x2', '\x2', 
		'/', '\x30', '\a', '\x5E91', '\x2', '\x2', '\x30', '\x31', '\a', '\x96C8', 
		'\x2', '\x2', '\x31', '\x32', '\a', '\x53DA', '\x2', '\x2', '\x32', '\x33', 
		'\a', '\x91D1', '\x2', '\x2', '\x33', '\xE', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x35', '\a', '\x30', '\x2', '\x2', '\x35', '\x36', '\a', '\x5B52', 
		'\x2', '\x2', '\x36', '\x37', '\a', '\x7A0D', '\x2', '\x2', '\x37', '\x38', 
		'\a', '\x5E91', '\x2', '\x2', '\x38', '\x10', '\x3', '\x2', '\x2', '\x2', 
		'\x39', ';', '\x4', '\x32', ';', '\x2', ':', '\x39', '\x3', '\x2', '\x2', 
		'\x2', ';', '<', '\x3', '\x2', '\x2', '\x2', '<', ':', '\x3', '\x2', '\x2', 
		'\x2', '<', '=', '\x3', '\x2', '\x2', '\x2', '=', '\x12', '\x3', '\x2', 
		'\x2', '\x2', '>', '@', '\t', '\x2', '\x2', '\x2', '?', '>', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x41', '\x3', '\x2', '\x2', '\x2', '\x41', '?', '\x3', 
		'\x2', '\x2', '\x2', '\x41', '\x42', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'\x14', '\x3', '\x2', '\x2', '\x2', '\x43', '\x45', '\t', '\x3', '\x2', 
		'\x2', '\x44', '\x43', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', '\x3', 
		'\x2', '\x2', '\x2', '\x46', '\x44', '\x3', '\x2', '\x2', '\x2', '\x46', 
		'G', '\x3', '\x2', '\x2', '\x2', 'G', '\x16', '\x3', '\x2', '\x2', '\x2', 
		'H', 'J', '\t', '\x4', '\x2', '\x2', 'I', 'H', '\x3', '\x2', '\x2', '\x2', 
		'J', 'K', '\x3', '\x2', '\x2', '\x2', 'K', 'I', '\x3', '\x2', '\x2', '\x2', 
		'K', 'L', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\x3', '\x2', '\x2', '\x2', 
		'M', 'N', '\b', '\f', '\x2', '\x2', 'N', '\x18', '\x3', '\x2', '\x2', 
		'\x2', 'O', 'Q', '\a', '\xF', '\x2', '\x2', 'P', 'O', '\x3', '\x2', '\x2', 
		'\x2', 'P', 'Q', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'S', '\a', '\f', '\x2', '\x2', 'S', 'T', '\x3', '\x2', '\x2', 
		'\x2', 'T', 'U', '\b', '\r', '\x2', '\x2', 'U', '\x1A', '\x3', '\x2', 
		'\x2', '\x2', '\b', '\x2', '<', '\x41', '\x46', 'K', 'P', '\x3', '\b', 
		'\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
