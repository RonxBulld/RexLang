//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/Project/OpenELanguage/Compiler\opene.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class openeParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, VERSION=3, LIBRARY=4, PROGRAM_SET=5, PROGRAM_SET_VARIABLE=6, 
		SUB_PROGRAM=7, DIGIT=8, FILENAME=9, IDENTIFIER=10, WHITESPACE=11, NEWLINE=12;
	public const int
		RULE_opene_src = 0, RULE_edition_spec = 1, RULE_library_list_opt = 2, 
		RULE_library_spec = 3, RULE_prog_set_name = 4, RULE_prog_set_variable_decl_opt = 5, 
		RULE_variable_decl = 6, RULE_dimension_decl = 7, RULE_sub_program_opt = 8;
	public static readonly string[] ruleNames = {
		"opene_src", "edition_spec", "library_list_opt", "library_spec", "prog_set_name", 
		"prog_set_variable_decl_opt", "variable_decl", "dimension_decl", "sub_program_opt"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "'\"'", "'.\u7248\u672C'", "'.\u652F\u6301\u5E93'", "'.\u7A0B\u5E8F\u96C6'", 
		"'.\u7A0B\u5E8F\u96C6\u53D8\u91CF'", "'.\u5B50\u7A0B\u5E8F'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "VERSION", "LIBRARY", "PROGRAM_SET", "PROGRAM_SET_VARIABLE", 
		"SUB_PROGRAM", "DIGIT", "FILENAME", "IDENTIFIER", "WHITESPACE", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "opene.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static openeParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public openeParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public openeParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Opene_srcContext : ParserRuleContext {
		public Edition_specContext edition_spec() {
			return GetRuleContext<Edition_specContext>(0);
		}
		public Library_list_optContext library_list_opt() {
			return GetRuleContext<Library_list_optContext>(0);
		}
		public Prog_set_nameContext prog_set_name() {
			return GetRuleContext<Prog_set_nameContext>(0);
		}
		public Prog_set_variable_decl_optContext prog_set_variable_decl_opt() {
			return GetRuleContext<Prog_set_variable_decl_optContext>(0);
		}
		public Sub_program_optContext sub_program_opt() {
			return GetRuleContext<Sub_program_optContext>(0);
		}
		public Opene_srcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opene_src; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpene_src(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Opene_srcContext opene_src() {
		Opene_srcContext _localctx = new Opene_srcContext(Context, State);
		EnterRule(_localctx, 0, RULE_opene_src);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18; edition_spec();
			State = 19; library_list_opt();
			State = 20; prog_set_name();
			State = 21; prog_set_variable_decl_opt();
			State = 22; sub_program_opt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Edition_specContext : ParserRuleContext {
		public ITerminalNode VERSION() { return GetToken(openeParser.VERSION, 0); }
		public ITerminalNode DIGIT() { return GetToken(openeParser.DIGIT, 0); }
		public Edition_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_edition_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEdition_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Edition_specContext edition_spec() {
		Edition_specContext _localctx = new Edition_specContext(Context, State);
		EnterRule(_localctx, 2, RULE_edition_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24; Match(VERSION);
			State = 25; Match(DIGIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Library_list_optContext : ParserRuleContext {
		public Library_specContext[] library_spec() {
			return GetRuleContexts<Library_specContext>();
		}
		public Library_specContext library_spec(int i) {
			return GetRuleContext<Library_specContext>(i);
		}
		public Library_list_optContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_library_list_opt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLibrary_list_opt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Library_list_optContext library_list_opt() {
		Library_list_optContext _localctx = new Library_list_optContext(Context, State);
		EnterRule(_localctx, 4, RULE_library_list_opt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LIBRARY) {
				{
				{
				State = 27; library_spec();
				}
				}
				State = 32;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Library_specContext : ParserRuleContext {
		public ITerminalNode LIBRARY() { return GetToken(openeParser.LIBRARY, 0); }
		public ITerminalNode FILENAME() { return GetToken(openeParser.FILENAME, 0); }
		public Library_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_library_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLibrary_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Library_specContext library_spec() {
		Library_specContext _localctx = new Library_specContext(Context, State);
		EnterRule(_localctx, 6, RULE_library_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33; Match(LIBRARY);
			State = 34; Match(FILENAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prog_set_nameContext : ParserRuleContext {
		public ITerminalNode PROGRAM_SET() { return GetToken(openeParser.PROGRAM_SET, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(openeParser.IDENTIFIER, 0); }
		public Prog_set_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog_set_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg_set_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Prog_set_nameContext prog_set_name() {
		Prog_set_nameContext _localctx = new Prog_set_nameContext(Context, State);
		EnterRule(_localctx, 8, RULE_prog_set_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36; Match(PROGRAM_SET);
			State = 37; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prog_set_variable_decl_optContext : ParserRuleContext {
		public Variable_declContext[] variable_decl() {
			return GetRuleContexts<Variable_declContext>();
		}
		public Variable_declContext variable_decl(int i) {
			return GetRuleContext<Variable_declContext>(i);
		}
		public Prog_set_variable_decl_optContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog_set_variable_decl_opt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg_set_variable_decl_opt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Prog_set_variable_decl_optContext prog_set_variable_decl_opt() {
		Prog_set_variable_decl_optContext _localctx = new Prog_set_variable_decl_optContext(Context, State);
		EnterRule(_localctx, 10, RULE_prog_set_variable_decl_opt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PROGRAM_SET_VARIABLE) {
				{
				{
				State = 39; variable_decl();
				}
				}
				State = 44;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declContext : ParserRuleContext {
		public ITerminalNode PROGRAM_SET_VARIABLE() { return GetToken(openeParser.PROGRAM_SET_VARIABLE, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(openeParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(openeParser.IDENTIFIER, i);
		}
		public Dimension_declContext dimension_decl() {
			return GetRuleContext<Dimension_declContext>(0);
		}
		public Variable_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_decl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declContext variable_decl() {
		Variable_declContext _localctx = new Variable_declContext(Context, State);
		EnterRule(_localctx, 12, RULE_variable_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45; Match(PROGRAM_SET_VARIABLE);
			State = 46; Match(IDENTIFIER);
			State = 47; Match(T__0);
			State = 48; Match(IDENTIFIER);
			State = 49; Match(T__0);
			State = 50; Match(T__0);
			State = 52;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__1) {
				{
				State = 51; dimension_decl();
				}
			}

			State = 54; Match(T__0);
			State = 55; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dimension_declContext : ParserRuleContext {
		public ITerminalNode DIGIT() { return GetToken(openeParser.DIGIT, 0); }
		public Dimension_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimension_decl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDimension_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dimension_declContext dimension_decl() {
		Dimension_declContext _localctx = new Dimension_declContext(Context, State);
		EnterRule(_localctx, 14, RULE_dimension_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57; Match(T__1);
			State = 58; Match(DIGIT);
			State = 59; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sub_program_optContext : ParserRuleContext {
		public ITerminalNode SUB_PROGRAM() { return GetToken(openeParser.SUB_PROGRAM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(openeParser.IDENTIFIER, 0); }
		public Sub_program_optContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sub_program_opt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSub_program_opt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sub_program_optContext sub_program_opt() {
		Sub_program_optContext _localctx = new Sub_program_optContext(Context, State);
		EnterRule(_localctx, 16, RULE_sub_program_opt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61; Match(SUB_PROGRAM);
			State = 62; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xE', '\x43', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\a', '\x4', '\x1F', 
		'\n', '\x4', '\f', '\x4', '\xE', '\x4', '\"', '\v', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\a', '\a', '\a', '+', '\n', '\a', '\f', '\a', '\xE', '\a', '.', 
		'\v', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x37', '\n', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x2', 
		'\x2', '\v', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x2', '\x2', '\x2', '<', '\x2', '\x14', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\x1A', '\x3', '\x2', '\x2', '\x2', '\x6', ' ', '\x3', '\x2', '\x2', '\x2', 
		'\b', '#', '\x3', '\x2', '\x2', '\x2', '\n', '&', '\x3', '\x2', '\x2', 
		'\x2', '\f', ',', '\x3', '\x2', '\x2', '\x2', '\xE', '/', '\x3', '\x2', 
		'\x2', '\x2', '\x10', ';', '\x3', '\x2', '\x2', '\x2', '\x12', '?', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '\x15', '\x5', '\x4', '\x3', '\x2', '\x15', 
		'\x16', '\x5', '\x6', '\x4', '\x2', '\x16', '\x17', '\x5', '\n', '\x6', 
		'\x2', '\x17', '\x18', '\x5', '\f', '\a', '\x2', '\x18', '\x19', '\x5', 
		'\x12', '\n', '\x2', '\x19', '\x3', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\x1B', '\a', '\x5', '\x2', '\x2', '\x1B', '\x1C', '\a', '\n', '\x2', 
		'\x2', '\x1C', '\x5', '\x3', '\x2', '\x2', '\x2', '\x1D', '\x1F', '\x5', 
		'\b', '\x5', '\x2', '\x1E', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x1F', 
		'\"', '\x3', '\x2', '\x2', '\x2', ' ', '\x1E', '\x3', '\x2', '\x2', '\x2', 
		' ', '!', '\x3', '\x2', '\x2', '\x2', '!', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\"', ' ', '\x3', '\x2', '\x2', '\x2', '#', '$', '\a', '\x6', '\x2', 
		'\x2', '$', '%', '\a', '\v', '\x2', '\x2', '%', '\t', '\x3', '\x2', '\x2', 
		'\x2', '&', '\'', '\a', '\a', '\x2', '\x2', '\'', '(', '\a', '\f', '\x2', 
		'\x2', '(', '\v', '\x3', '\x2', '\x2', '\x2', ')', '+', '\x5', '\xE', 
		'\b', '\x2', '*', ')', '\x3', '\x2', '\x2', '\x2', '+', '.', '\x3', '\x2', 
		'\x2', '\x2', ',', '*', '\x3', '\x2', '\x2', '\x2', ',', '-', '\x3', '\x2', 
		'\x2', '\x2', '-', '\r', '\x3', '\x2', '\x2', '\x2', '.', ',', '\x3', 
		'\x2', '\x2', '\x2', '/', '\x30', '\a', '\b', '\x2', '\x2', '\x30', '\x31', 
		'\a', '\f', '\x2', '\x2', '\x31', '\x32', '\a', '\x3', '\x2', '\x2', '\x32', 
		'\x33', '\a', '\f', '\x2', '\x2', '\x33', '\x34', '\a', '\x3', '\x2', 
		'\x2', '\x34', '\x36', '\a', '\x3', '\x2', '\x2', '\x35', '\x37', '\x5', 
		'\x10', '\t', '\x2', '\x36', '\x35', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\x3', '\x2', '\x2', 
		'\x2', '\x38', '\x39', '\a', '\x3', '\x2', '\x2', '\x39', ':', '\a', '\f', 
		'\x2', '\x2', ':', '\xF', '\x3', '\x2', '\x2', '\x2', ';', '<', '\a', 
		'\x4', '\x2', '\x2', '<', '=', '\a', '\n', '\x2', '\x2', '=', '>', '\a', 
		'\x4', '\x2', '\x2', '>', '\x11', '\x3', '\x2', '\x2', '\x2', '?', '@', 
		'\a', '\t', '\x2', '\x2', '@', '\x41', '\a', '\f', '\x2', '\x2', '\x41', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x5', ' ', ',', '\x36',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
