//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:/Project/OpenELanguage/Compiler\opene.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class opene : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		K_VERSION=1, K_LIBRARY=2, K_PROGRAM_SET=3, K_PROGRAM_SET_VARIABLE=4, K_LOCAL_VARIABLE=5, 
		K_MEMBER_VARIABLE=6, K_PARAMETER=7, K_SUB_PROGRAM=8, K_STRUCTURE=9, K_IF_TRUE=10, 
		K_END_IF_TRUE=11, K_IF=12, K_ELSE=13, K_END_IF=14, K_WHILE=15, K_WHILE_END=16, 
		K_FOR=17, K_FOR_END=18, K_TRUE=19, K_FALSE=20, K_ADD_OPT=21, K_SUB_OPT=22, 
		K_MUL_OPT=23, K_DIV_OPT=24, K_FULL_DIV_OPT=25, K_MOD_OPT=26, K_AECOM_OPT=27, 
		K_ASSIGN_OPT=28, K_EQUAL_OPT=29, K_NOT_EQUAL_OPT=30, K_GREAT_OPT=31, K_LESS_OPT=32, 
		K_GREAT_EQU_OPT=33, K_LESS_EQU_OPT=34, K_LIKE_EQU_OPT=35, K_OR_OPT=36, 
		K_AND_OPT=37, COMMA=38, LBRACK=39, RBRACK=40, LSQUBRACK=41, RSQUBRACK=42, 
		SHARP=43, ADDRESS=44, DQUOTE=45, DOT=46, INTEGER_LITERAL=47, FLOAT_LITERAL=48, 
		IDENTIFIER=49, WHITESPACE=50, NEWLINE=51, STRING_LITERAL=52, OTHER_CHAR=53, 
		TABLE_END=54, TABLE_ITEM=55, TABLE_WS=56, TABLE_COMMA=57;
	public const int
		RULE_opene = 0, RULE_edition_spec = 1, RULE_struct_declare = 2, RULE_access_level = 3, 
		RULE_member_list = 4, RULE_library_list_opt = 5, RULE_library_spec = 6, 
		RULE_prog_set = 7, RULE_prog_set_variable_decl_opt = 8, RULE_prog_set_variable_decl = 9, 
		RULE_variable_decl = 10, RULE_variable_comment = 11, RULE_variable_comment_element = 12, 
		RULE_variable_name = 13, RULE_variable_type = 14, RULE_dimension_decl = 15, 
		RULE_sub_program_opt = 16, RULE_sub_program = 17, RULE_parameter_decl_list = 18, 
		RULE_parameter_decl = 19, RULE_local_variable_decl = 20, RULE_statement_list = 21, 
		RULE_statement = 22, RULE_loop_statement = 23, RULE_condition_statement = 24, 
		RULE_condition_statement_else = 25, RULE_hierarchy_identifier = 26, RULE_name_component = 27, 
		RULE_expression = 28, RULE_macro_value = 29, RULE_func_ptr = 30, RULE_bool_value = 31, 
		RULE_number = 32, RULE_string_value = 33;
	public static readonly string[] ruleNames = {
		"opene", "edition_spec", "struct_declare", "access_level", "member_list", 
		"library_list_opt", "library_spec", "prog_set", "prog_set_variable_decl_opt", 
		"prog_set_variable_decl", "variable_decl", "variable_comment", "variable_comment_element", 
		"variable_name", "variable_type", "dimension_decl", "sub_program_opt", 
		"sub_program", "parameter_decl_list", "parameter_decl", "local_variable_decl", 
		"statement_list", "statement", "loop_statement", "condition_statement", 
		"condition_statement_else", "hierarchy_identifier", "name_component", 
		"expression", "macro_value", "func_ptr", "bool_value", "number", "string_value"
	};

	private static readonly string[] _LiteralNames = {
		null, "'.\u7248\u672C'", "'.\u652F\u6301\u5E93'", "'.\u7A0B\u5E8F\u96C6'", 
		"'.\u7A0B\u5E8F\u96C6\u53D8\u91CF'", "'.\u5C40\u90E8\u53D8\u91CF'", "'.\u6210\u5458'", 
		"'.\u53C2\u6570'", "'.\u5B50\u7A0B\u5E8F'", "'.\u6570\u636E\u7C7B\u578B'", 
		"'.\u5982\u679C\u771F'", "'.\u5982\u679C\u771F\u7ED3\u675F'", "'.\u5982\u679C'", 
		"'.\u5426\u5219'", "'.\u5982\u679C\u7ED3\u675F'", "'.\u5224\u65AD\u5FAA\u73AF\u9996'", 
		"'.\u5224\u65AD\u5FAA\u73AF\u5C3E'", "'.\u8BA1\u6B21\u5FAA\u73AF\u9996'", 
		"'.\u8BA1\u6B21\u5FAA\u73AF\u5C3E'", "'\u771F'", "'\u5047'", null, null, 
		null, null, null, null, "'\uFF1D'", "'='", "'=='", null, null, null, null, 
		null, null, null, null, null, "'('", "')'", "'['", "']'", "'#'", "'&'", 
		"'\"'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "K_VERSION", "K_LIBRARY", "K_PROGRAM_SET", "K_PROGRAM_SET_VARIABLE", 
		"K_LOCAL_VARIABLE", "K_MEMBER_VARIABLE", "K_PARAMETER", "K_SUB_PROGRAM", 
		"K_STRUCTURE", "K_IF_TRUE", "K_END_IF_TRUE", "K_IF", "K_ELSE", "K_END_IF", 
		"K_WHILE", "K_WHILE_END", "K_FOR", "K_FOR_END", "K_TRUE", "K_FALSE", "K_ADD_OPT", 
		"K_SUB_OPT", "K_MUL_OPT", "K_DIV_OPT", "K_FULL_DIV_OPT", "K_MOD_OPT", 
		"K_AECOM_OPT", "K_ASSIGN_OPT", "K_EQUAL_OPT", "K_NOT_EQUAL_OPT", "K_GREAT_OPT", 
		"K_LESS_OPT", "K_GREAT_EQU_OPT", "K_LESS_EQU_OPT", "K_LIKE_EQU_OPT", "K_OR_OPT", 
		"K_AND_OPT", "COMMA", "LBRACK", "RBRACK", "LSQUBRACK", "RSQUBRACK", "SHARP", 
		"ADDRESS", "DQUOTE", "DOT", "INTEGER_LITERAL", "FLOAT_LITERAL", "IDENTIFIER", 
		"WHITESPACE", "NEWLINE", "STRING_LITERAL", "OTHER_CHAR", "TABLE_END", 
		"TABLE_ITEM", "TABLE_WS", "TABLE_COMMA"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "opene.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static opene() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public opene(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public opene(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class OpeneContext : ParserRuleContext {
		public Edition_specContext edition_spec() {
			return GetRuleContext<Edition_specContext>(0);
		}
		public ITerminalNode NEWLINE() { return GetToken(opene.NEWLINE, 0); }
		public Library_list_optContext library_list_opt() {
			return GetRuleContext<Library_list_optContext>(0);
		}
		public Prog_setContext prog_set() {
			return GetRuleContext<Prog_setContext>(0);
		}
		public Struct_declareContext[] struct_declare() {
			return GetRuleContexts<Struct_declareContext>();
		}
		public Struct_declareContext struct_declare(int i) {
			return GetRuleContext<Struct_declareContext>(i);
		}
		public OpeneContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opene; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpene(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpeneContext opene() {
		OpeneContext _localctx = new OpeneContext(Context, State);
		EnterRule(_localctx, 0, RULE_opene);
		int _la;
		try {
			State = 80;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 68; edition_spec();
				State = 69; Match(NEWLINE);
				State = 70; library_list_opt();
				State = 71; prog_set();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 73; edition_spec();
				State = 77;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==K_STRUCTURE) {
					{
					{
					State = 74; struct_declare();
					}
					}
					State = 79;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Edition_specContext : ParserRuleContext {
		public ITerminalNode K_VERSION() { return GetToken(opene.K_VERSION, 0); }
		public ITerminalNode INTEGER_LITERAL() { return GetToken(opene.INTEGER_LITERAL, 0); }
		public Edition_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_edition_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEdition_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Edition_specContext edition_spec() {
		Edition_specContext _localctx = new Edition_specContext(Context, State);
		EnterRule(_localctx, 2, RULE_edition_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 82; Match(K_VERSION);
			State = 83; Match(INTEGER_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_declareContext : ParserRuleContext {
		public ITerminalNode K_STRUCTURE() { return GetToken(opene.K_STRUCTURE, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(opene.IDENTIFIER, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(opene.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(opene.COMMA, i);
		}
		public Variable_commentContext variable_comment() {
			return GetRuleContext<Variable_commentContext>(0);
		}
		public Member_listContext[] member_list() {
			return GetRuleContexts<Member_listContext>();
		}
		public Member_listContext member_list(int i) {
			return GetRuleContext<Member_listContext>(i);
		}
		public Access_levelContext access_level() {
			return GetRuleContext<Access_levelContext>(0);
		}
		public Struct_declareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_declare; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_declare(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_declareContext struct_declare() {
		Struct_declareContext _localctx = new Struct_declareContext(Context, State);
		EnterRule(_localctx, 4, RULE_struct_declare);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85; Match(K_STRUCTURE);
			State = 86; Match(IDENTIFIER);
			State = 91;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 87; Match(COMMA);
				State = 89;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 88; access_level();
					}
				}

				}
				break;
			}
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 93; Match(COMMA);
				State = 94; variable_comment();
				}
			}

			State = 100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==K_MEMBER_VARIABLE) {
				{
				{
				State = 97; member_list();
				}
				}
				State = 102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Access_levelContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(opene.IDENTIFIER, 0); }
		public Access_levelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_access_level; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccess_level(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Access_levelContext access_level() {
		Access_levelContext _localctx = new Access_levelContext(Context, State);
		EnterRule(_localctx, 6, RULE_access_level);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_listContext : ParserRuleContext {
		public ITerminalNode K_MEMBER_VARIABLE() { return GetToken(opene.K_MEMBER_VARIABLE, 0); }
		public Variable_declContext variable_decl() {
			return GetRuleContext<Variable_declContext>(0);
		}
		public Member_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_list; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_listContext member_list() {
		Member_listContext _localctx = new Member_listContext(Context, State);
		EnterRule(_localctx, 8, RULE_member_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105; Match(K_MEMBER_VARIABLE);
			State = 106; variable_decl();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Library_list_optContext : ParserRuleContext {
		public Library_specContext[] library_spec() {
			return GetRuleContexts<Library_specContext>();
		}
		public Library_specContext library_spec(int i) {
			return GetRuleContext<Library_specContext>(i);
		}
		public Library_list_optContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_library_list_opt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLibrary_list_opt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Library_list_optContext library_list_opt() {
		Library_list_optContext _localctx = new Library_list_optContext(Context, State);
		EnterRule(_localctx, 10, RULE_library_list_opt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==K_LIBRARY) {
				{
				{
				State = 108; library_spec();
				}
				}
				State = 113;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Library_specContext : ParserRuleContext {
		public ITerminalNode K_LIBRARY() { return GetToken(opene.K_LIBRARY, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(opene.IDENTIFIER, 0); }
		public ITerminalNode NEWLINE() { return GetToken(opene.NEWLINE, 0); }
		public Library_specContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_library_spec; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLibrary_spec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Library_specContext library_spec() {
		Library_specContext _localctx = new Library_specContext(Context, State);
		EnterRule(_localctx, 12, RULE_library_spec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114; Match(K_LIBRARY);
			State = 115; Match(IDENTIFIER);
			State = 116; Match(NEWLINE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prog_setContext : ParserRuleContext {
		public IToken name;
		public ITerminalNode K_PROGRAM_SET() { return GetToken(opene.K_PROGRAM_SET, 0); }
		public ITerminalNode TABLE_END() { return GetToken(opene.TABLE_END, 0); }
		public Prog_set_variable_decl_optContext prog_set_variable_decl_opt() {
			return GetRuleContext<Prog_set_variable_decl_optContext>(0);
		}
		public Sub_program_optContext sub_program_opt() {
			return GetRuleContext<Sub_program_optContext>(0);
		}
		public ITerminalNode TABLE_ITEM() { return GetToken(opene.TABLE_ITEM, 0); }
		public Prog_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog_set; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg_set(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Prog_setContext prog_set() {
		Prog_setContext _localctx = new Prog_setContext(Context, State);
		EnterRule(_localctx, 14, RULE_prog_set);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118; Match(K_PROGRAM_SET);
			State = 119; _localctx.name = Match(TABLE_ITEM);
			State = 120; Match(TABLE_END);
			State = 121; prog_set_variable_decl_opt();
			State = 122; sub_program_opt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prog_set_variable_decl_optContext : ParserRuleContext {
		public Prog_set_variable_declContext[] prog_set_variable_decl() {
			return GetRuleContexts<Prog_set_variable_declContext>();
		}
		public Prog_set_variable_declContext prog_set_variable_decl(int i) {
			return GetRuleContext<Prog_set_variable_declContext>(i);
		}
		public Prog_set_variable_decl_optContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog_set_variable_decl_opt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg_set_variable_decl_opt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Prog_set_variable_decl_optContext prog_set_variable_decl_opt() {
		Prog_set_variable_decl_optContext _localctx = new Prog_set_variable_decl_optContext(Context, State);
		EnterRule(_localctx, 16, RULE_prog_set_variable_decl_opt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==K_PROGRAM_SET_VARIABLE) {
				{
				{
				State = 124; prog_set_variable_decl();
				}
				}
				State = 129;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prog_set_variable_declContext : ParserRuleContext {
		public ITerminalNode K_PROGRAM_SET_VARIABLE() { return GetToken(opene.K_PROGRAM_SET_VARIABLE, 0); }
		public Variable_declContext variable_decl() {
			return GetRuleContext<Variable_declContext>(0);
		}
		public Prog_set_variable_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog_set_variable_decl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg_set_variable_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Prog_set_variable_declContext prog_set_variable_decl() {
		Prog_set_variable_declContext _localctx = new Prog_set_variable_declContext(Context, State);
		EnterRule(_localctx, 18, RULE_prog_set_variable_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130; Match(K_PROGRAM_SET_VARIABLE);
			State = 131; variable_decl();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declContext : ParserRuleContext {
		public IToken name;
		public IToken type;
		public IToken dimension;
		public IToken comment;
		public ITerminalNode[] TABLE_COMMA() { return GetTokens(opene.TABLE_COMMA); }
		public ITerminalNode TABLE_COMMA(int i) {
			return GetToken(opene.TABLE_COMMA, i);
		}
		public ITerminalNode TABLE_END() { return GetToken(opene.TABLE_END, 0); }
		public ITerminalNode[] TABLE_ITEM() { return GetTokens(opene.TABLE_ITEM); }
		public ITerminalNode TABLE_ITEM(int i) {
			return GetToken(opene.TABLE_ITEM, i);
		}
		public Variable_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_decl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declContext variable_decl() {
		Variable_declContext _localctx = new Variable_declContext(Context, State);
		EnterRule(_localctx, 20, RULE_variable_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133; _localctx.name = Match(TABLE_ITEM);
			State = 134; Match(TABLE_COMMA);
			State = 135; _localctx.type = Match(TABLE_ITEM);
			State = 141;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 136; Match(TABLE_COMMA);
				State = 137; Match(TABLE_COMMA);
				State = 139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TABLE_ITEM) {
					{
					State = 138; _localctx.dimension = Match(TABLE_ITEM);
					}
				}

				}
				break;
			}
			State = 145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TABLE_COMMA) {
				{
				State = 143; Match(TABLE_COMMA);
				State = 144; _localctx.comment = Match(TABLE_ITEM);
				}
			}

			State = 147; Match(TABLE_END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_commentContext : ParserRuleContext {
		public Variable_comment_elementContext[] variable_comment_element() {
			return GetRuleContexts<Variable_comment_elementContext>();
		}
		public Variable_comment_elementContext variable_comment_element(int i) {
			return GetRuleContext<Variable_comment_elementContext>(i);
		}
		public Variable_commentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_comment; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_comment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_commentContext variable_comment() {
		Variable_commentContext _localctx = new Variable_commentContext(Context, State);
		EnterRule(_localctx, 22, RULE_variable_comment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COMMA) | (1L << IDENTIFIER) | (1L << OTHER_CHAR))) != 0)) {
				{
				{
				State = 149; variable_comment_element();
				}
				}
				State = 154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_comment_elementContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(opene.IDENTIFIER, 0); }
		public ITerminalNode OTHER_CHAR() { return GetToken(opene.OTHER_CHAR, 0); }
		public ITerminalNode COMMA() { return GetToken(opene.COMMA, 0); }
		public Variable_comment_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_comment_element; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_comment_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_comment_elementContext variable_comment_element() {
		Variable_comment_elementContext _localctx = new Variable_comment_elementContext(Context, State);
		EnterRule(_localctx, 24, RULE_variable_comment_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COMMA) | (1L << IDENTIFIER) | (1L << OTHER_CHAR))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_nameContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(opene.IDENTIFIER, 0); }
		public Variable_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_name; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_nameContext variable_name() {
		Variable_nameContext _localctx = new Variable_nameContext(Context, State);
		EnterRule(_localctx, 26, RULE_variable_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_typeContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(opene.IDENTIFIER, 0); }
		public Variable_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_typeContext variable_type() {
		Variable_typeContext _localctx = new Variable_typeContext(Context, State);
		EnterRule(_localctx, 28, RULE_variable_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dimension_declContext : ParserRuleContext {
		public ITerminalNode[] DQUOTE() { return GetTokens(opene.DQUOTE); }
		public ITerminalNode DQUOTE(int i) {
			return GetToken(opene.DQUOTE, i);
		}
		public ITerminalNode INTEGER_LITERAL() { return GetToken(opene.INTEGER_LITERAL, 0); }
		public Dimension_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dimension_decl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDimension_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dimension_declContext dimension_decl() {
		Dimension_declContext _localctx = new Dimension_declContext(Context, State);
		EnterRule(_localctx, 30, RULE_dimension_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161; Match(DQUOTE);
			State = 162; Match(INTEGER_LITERAL);
			State = 163; Match(DQUOTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sub_program_optContext : ParserRuleContext {
		public Sub_programContext[] sub_program() {
			return GetRuleContexts<Sub_programContext>();
		}
		public Sub_programContext sub_program(int i) {
			return GetRuleContext<Sub_programContext>(i);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(opene.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(opene.NEWLINE, i);
		}
		public Sub_program_optContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sub_program_opt; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSub_program_opt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sub_program_optContext sub_program_opt() {
		Sub_program_optContext _localctx = new Sub_program_optContext(Context, State);
		EnterRule(_localctx, 32, RULE_sub_program_opt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 180;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==K_SUB_PROGRAM || _la==NEWLINE) {
				{
				{
				State = 168;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NEWLINE) {
					{
					{
					State = 165; Match(NEWLINE);
					}
					}
					State = 170;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 171; sub_program();
				State = 175;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 172; Match(NEWLINE);
						}
						} 
					}
					State = 177;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
				}
				}
				}
				State = 182;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sub_programContext : ParserRuleContext {
		public IToken name;
		public IToken type;
		public IToken access;
		public IToken comment;
		public ITerminalNode K_SUB_PROGRAM() { return GetToken(opene.K_SUB_PROGRAM, 0); }
		public ITerminalNode TABLE_END() { return GetToken(opene.TABLE_END, 0); }
		public Parameter_decl_listContext parameter_decl_list() {
			return GetRuleContext<Parameter_decl_listContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ITerminalNode[] TABLE_ITEM() { return GetTokens(opene.TABLE_ITEM); }
		public ITerminalNode TABLE_ITEM(int i) {
			return GetToken(opene.TABLE_ITEM, i);
		}
		public ITerminalNode[] TABLE_COMMA() { return GetTokens(opene.TABLE_COMMA); }
		public ITerminalNode TABLE_COMMA(int i) {
			return GetToken(opene.TABLE_COMMA, i);
		}
		public Local_variable_declContext[] local_variable_decl() {
			return GetRuleContexts<Local_variable_declContext>();
		}
		public Local_variable_declContext local_variable_decl(int i) {
			return GetRuleContext<Local_variable_declContext>(i);
		}
		public Sub_programContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sub_program; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSub_program(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sub_programContext sub_program() {
		Sub_programContext _localctx = new Sub_programContext(Context, State);
		EnterRule(_localctx, 34, RULE_sub_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183; Match(K_SUB_PROGRAM);
			State = 184; _localctx.name = Match(TABLE_ITEM);
			State = 199;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TABLE_COMMA) {
				{
				State = 185; Match(TABLE_COMMA);
				State = 187;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TABLE_ITEM) {
					{
					State = 186; _localctx.type = Match(TABLE_ITEM);
					}
				}

				State = 197;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TABLE_COMMA) {
					{
					State = 189; Match(TABLE_COMMA);
					State = 191;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==TABLE_ITEM) {
						{
						State = 190; _localctx.access = Match(TABLE_ITEM);
						}
					}

					State = 195;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==TABLE_COMMA) {
						{
						State = 193; Match(TABLE_COMMA);
						State = 194; _localctx.comment = Match(TABLE_ITEM);
						}
					}

					}
				}

				}
			}

			State = 201; Match(TABLE_END);
			State = 202; parameter_decl_list();
			State = 206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==K_LOCAL_VARIABLE) {
				{
				{
				State = 203; local_variable_decl();
				}
				}
				State = 208;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 209; statement_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_decl_listContext : ParserRuleContext {
		public Parameter_declContext[] parameter_decl() {
			return GetRuleContexts<Parameter_declContext>();
		}
		public Parameter_declContext parameter_decl(int i) {
			return GetRuleContext<Parameter_declContext>(i);
		}
		public Parameter_decl_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_decl_list; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_decl_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_decl_listContext parameter_decl_list() {
		Parameter_decl_listContext _localctx = new Parameter_decl_listContext(Context, State);
		EnterRule(_localctx, 36, RULE_parameter_decl_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==K_PARAMETER) {
				{
				{
				State = 211; parameter_decl();
				}
				}
				State = 216;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_declContext : ParserRuleContext {
		public ITerminalNode K_PARAMETER() { return GetToken(opene.K_PARAMETER, 0); }
		public Variable_declContext variable_decl() {
			return GetRuleContext<Variable_declContext>(0);
		}
		public Parameter_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_decl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_declContext parameter_decl() {
		Parameter_declContext _localctx = new Parameter_declContext(Context, State);
		EnterRule(_localctx, 38, RULE_parameter_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217; Match(K_PARAMETER);
			State = 218; variable_decl();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_variable_declContext : ParserRuleContext {
		public ITerminalNode K_LOCAL_VARIABLE() { return GetToken(opene.K_LOCAL_VARIABLE, 0); }
		public Variable_declContext variable_decl() {
			return GetRuleContext<Variable_declContext>(0);
		}
		public Local_variable_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_variable_decl; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_variable_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_variable_declContext local_variable_decl() {
		Local_variable_declContext _localctx = new Local_variable_declContext(Context, State);
		EnterRule(_localctx, 40, RULE_local_variable_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220; Match(K_LOCAL_VARIABLE);
			State = 221; variable_decl();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_listContext : ParserRuleContext {
		public ITerminalNode[] NEWLINE() { return GetTokens(opene.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(opene.NEWLINE, i);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_list; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_listContext statement_list() {
		Statement_listContext _localctx = new Statement_listContext(Context, State);
		EnterRule(_localctx, 42, RULE_statement_list);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 224;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << K_IF_TRUE) | (1L << K_IF) | (1L << K_WHILE) | (1L << K_FOR) | (1L << K_TRUE) | (1L << K_FALSE) | (1L << K_SUB_OPT) | (1L << LBRACK) | (1L << SHARP) | (1L << ADDRESS) | (1L << INTEGER_LITERAL) | (1L << FLOAT_LITERAL) | (1L << IDENTIFIER) | (1L << STRING_LITERAL))) != 0)) {
						{
						State = 223; statement();
						}
					}

					State = 226; Match(NEWLINE);
					}
					} 
				}
				State = 231;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExpressionStatementContext : StatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(StatementContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConditionStatementContext : StatementContext {
		public Condition_statementContext condition_statement() {
			return GetRuleContext<Condition_statementContext>(0);
		}
		public ConditionStatementContext(StatementContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoopStatementContext : StatementContext {
		public Loop_statementContext loop_statement() {
			return GetRuleContext<Loop_statementContext>(0);
		}
		public LoopStatementContext(StatementContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignStatementContext : StatementContext {
		public Hierarchy_identifierContext hierarchy_identifier() {
			return GetRuleContext<Hierarchy_identifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode K_ASSIGN_OPT() { return GetToken(opene.K_ASSIGN_OPT, 0); }
		public ITerminalNode K_AECOM_OPT() { return GetToken(opene.K_AECOM_OPT, 0); }
		public AssignStatementContext(StatementContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 44, RULE_statement);
		int _la;
		try {
			State = 239;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				_localctx = new ConditionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 232; condition_statement();
				}
				break;
			case 2:
				_localctx = new AssignStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 233; hierarchy_identifier();
				State = 234;
				_la = TokenStream.LA(1);
				if ( !(_la==K_AECOM_OPT || _la==K_ASSIGN_OPT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 235; expression(0);
				}
				break;
			case 3:
				_localctx = new ExpressionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 237; expression(0);
				}
				break;
			case 4:
				_localctx = new LoopStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 238; loop_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Loop_statementContext : ParserRuleContext {
		public Loop_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loop_statement; } }
	 
		public Loop_statementContext() { }
		public virtual void CopyFrom(Loop_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ForContext : Loop_statementContext {
		public ITerminalNode K_FOR() { return GetToken(opene.K_FOR, 0); }
		public ITerminalNode[] LBRACK() { return GetTokens(opene.LBRACK); }
		public ITerminalNode LBRACK(int i) {
			return GetToken(opene.LBRACK, i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(opene.COMMA, 0); }
		public ITerminalNode[] RBRACK() { return GetTokens(opene.RBRACK); }
		public ITerminalNode RBRACK(int i) {
			return GetToken(opene.RBRACK, i);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ITerminalNode K_FOR_END() { return GetToken(opene.K_FOR_END, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(opene.IDENTIFIER, 0); }
		public ForContext(Loop_statementContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileContext : Loop_statementContext {
		public ITerminalNode K_WHILE() { return GetToken(opene.K_WHILE, 0); }
		public ITerminalNode[] LBRACK() { return GetTokens(opene.LBRACK); }
		public ITerminalNode LBRACK(int i) {
			return GetToken(opene.LBRACK, i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode[] RBRACK() { return GetTokens(opene.RBRACK); }
		public ITerminalNode RBRACK(int i) {
			return GetToken(opene.RBRACK, i);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ITerminalNode K_WHILE_END() { return GetToken(opene.K_WHILE_END, 0); }
		public WhileContext(Loop_statementContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Loop_statementContext loop_statement() {
		Loop_statementContext _localctx = new Loop_statementContext(Context, State);
		EnterRule(_localctx, 46, RULE_loop_statement);
		int _la;
		try {
			State = 263;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case K_WHILE:
				_localctx = new WhileContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 241; Match(K_WHILE);
				State = 242; Match(LBRACK);
				State = 243; expression(0);
				State = 244; Match(RBRACK);
				State = 245; statement_list();
				State = 246; Match(K_WHILE_END);
				State = 247; Match(LBRACK);
				State = 248; Match(RBRACK);
				}
				break;
			case K_FOR:
				_localctx = new ForContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 250; Match(K_FOR);
				State = 251; Match(LBRACK);
				State = 252; expression(0);
				State = 253; Match(COMMA);
				State = 255;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 254; Match(IDENTIFIER);
					}
				}

				State = 257; Match(RBRACK);
				State = 258; statement_list();
				State = 259; Match(K_FOR_END);
				State = 260; Match(LBRACK);
				State = 261; Match(RBRACK);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Condition_statementContext : ParserRuleContext {
		public Condition_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition_statement; } }
	 
		public Condition_statementContext() { }
		public virtual void CopyFrom(Condition_statementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfStmtContext : Condition_statementContext {
		public ITerminalNode K_IF() { return GetToken(opene.K_IF, 0); }
		public ITerminalNode LBRACK() { return GetToken(opene.LBRACK, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RBRACK() { return GetToken(opene.RBRACK, 0); }
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ITerminalNode K_END_IF() { return GetToken(opene.K_END_IF, 0); }
		public Condition_statement_elseContext condition_statement_else() {
			return GetRuleContext<Condition_statement_elseContext>(0);
		}
		public IfStmtContext(Condition_statementContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfTrueStmtContext : Condition_statementContext {
		public ITerminalNode K_IF_TRUE() { return GetToken(opene.K_IF_TRUE, 0); }
		public ITerminalNode LBRACK() { return GetToken(opene.LBRACK, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RBRACK() { return GetToken(opene.RBRACK, 0); }
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public ITerminalNode K_END_IF_TRUE() { return GetToken(opene.K_END_IF_TRUE, 0); }
		public IfTrueStmtContext(Condition_statementContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfTrueStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Condition_statementContext condition_statement() {
		Condition_statementContext _localctx = new Condition_statementContext(Context, State);
		EnterRule(_localctx, 48, RULE_condition_statement);
		int _la;
		try {
			State = 282;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case K_IF:
				_localctx = new IfStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 265; Match(K_IF);
				State = 266; Match(LBRACK);
				State = 267; expression(0);
				State = 268; Match(RBRACK);
				State = 269; statement_list();
				State = 271;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==K_ELSE) {
					{
					State = 270; condition_statement_else();
					}
				}

				State = 273; Match(K_END_IF);
				}
				break;
			case K_IF_TRUE:
				_localctx = new IfTrueStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 275; Match(K_IF_TRUE);
				State = 276; Match(LBRACK);
				State = 277; expression(0);
				State = 278; Match(RBRACK);
				State = 279; statement_list();
				State = 280; Match(K_END_IF_TRUE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Condition_statement_elseContext : ParserRuleContext {
		public ITerminalNode K_ELSE() { return GetToken(opene.K_ELSE, 0); }
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public Condition_statement_elseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition_statement_else; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition_statement_else(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Condition_statement_elseContext condition_statement_else() {
		Condition_statement_elseContext _localctx = new Condition_statement_elseContext(Context, State);
		EnterRule(_localctx, 50, RULE_condition_statement_else);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 284; Match(K_ELSE);
			State = 285; statement_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hierarchy_identifierContext : ParserRuleContext {
		public Name_componentContext[] name_component() {
			return GetRuleContexts<Name_componentContext>();
		}
		public Name_componentContext name_component(int i) {
			return GetRuleContext<Name_componentContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(opene.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(opene.DOT, i);
		}
		public Hierarchy_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hierarchy_identifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHierarchy_identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Hierarchy_identifierContext hierarchy_identifier() {
		Hierarchy_identifierContext _localctx = new Hierarchy_identifierContext(Context, State);
		EnterRule(_localctx, 52, RULE_hierarchy_identifier);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 287; name_component(0);
			State = 292;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 288; Match(DOT);
					State = 289; name_component(0);
					}
					} 
				}
				State = 294;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Name_componentContext : ParserRuleContext {
		public Name_componentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name_component; } }
	 
		public Name_componentContext() { }
		public virtual void CopyFrom(Name_componentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdentifierContext : Name_componentContext {
		public ITerminalNode IDENTIFIER() { return GetToken(opene.IDENTIFIER, 0); }
		public IdentifierContext(Name_componentContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncCallWithArguContext : Name_componentContext {
		public Name_componentContext name_component() {
			return GetRuleContext<Name_componentContext>(0);
		}
		public ITerminalNode LBRACK() { return GetToken(opene.LBRACK, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RBRACK() { return GetToken(opene.RBRACK, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(opene.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(opene.COMMA, i);
		}
		public FuncCallWithArguContext(Name_componentContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCallWithArgu(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncCallWithoutArguContext : Name_componentContext {
		public Name_componentContext name_component() {
			return GetRuleContext<Name_componentContext>(0);
		}
		public ITerminalNode LBRACK() { return GetToken(opene.LBRACK, 0); }
		public ITerminalNode RBRACK() { return GetToken(opene.RBRACK, 0); }
		public FuncCallWithoutArguContext(Name_componentContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncCallWithoutArgu(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayIndexContext : Name_componentContext {
		public Name_componentContext name_component() {
			return GetRuleContext<Name_componentContext>(0);
		}
		public ITerminalNode LSQUBRACK() { return GetToken(opene.LSQUBRACK, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RSQUBRACK() { return GetToken(opene.RSQUBRACK, 0); }
		public ArrayIndexContext(Name_componentContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Name_componentContext name_component() {
		return name_component(0);
	}

	private Name_componentContext name_component(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Name_componentContext _localctx = new Name_componentContext(Context, _parentState);
		Name_componentContext _prevctx = _localctx;
		int _startState = 54;
		EnterRecursionRule(_localctx, 54, RULE_name_component, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new IdentifierContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 296; Match(IDENTIFIER);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 322;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 320;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
					case 1:
						{
						_localctx = new FuncCallWithoutArguContext(new Name_componentContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_name_component);
						State = 298;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 299; Match(LBRACK);
						State = 300; Match(RBRACK);
						}
						break;
					case 2:
						{
						_localctx = new FuncCallWithArguContext(new Name_componentContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_name_component);
						State = 301;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 302; Match(LBRACK);
						State = 303; expression(0);
						State = 310;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						while (_la==COMMA) {
							{
							{
							State = 304; Match(COMMA);
							State = 306;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << K_TRUE) | (1L << K_FALSE) | (1L << K_SUB_OPT) | (1L << LBRACK) | (1L << SHARP) | (1L << ADDRESS) | (1L << INTEGER_LITERAL) | (1L << FLOAT_LITERAL) | (1L << IDENTIFIER) | (1L << STRING_LITERAL))) != 0)) {
								{
								State = 305; expression(0);
								}
							}

							}
							}
							State = 312;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						}
						State = 313; Match(RBRACK);
						}
						break;
					case 3:
						{
						_localctx = new ArrayIndexContext(new Name_componentContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_name_component);
						State = 315;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 316; Match(LSQUBRACK);
						State = 317; expression(0);
						State = 318; Match(RSQUBRACK);
						}
						break;
					}
					} 
				}
				State = 324;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BracketContext : ExpressionContext {
		public ITerminalNode LBRACK() { return GetToken(opene.LBRACK, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RBRACK() { return GetToken(opene.RBRACK, 0); }
		public BracketContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracket(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OptElementContext : ExpressionContext {
		public NumberContext number() {
			return GetRuleContext<NumberContext>(0);
		}
		public Bool_valueContext bool_value() {
			return GetRuleContext<Bool_valueContext>(0);
		}
		public Macro_valueContext macro_value() {
			return GetRuleContext<Macro_valueContext>(0);
		}
		public String_valueContext string_value() {
			return GetRuleContext<String_valueContext>(0);
		}
		public Hierarchy_identifierContext hierarchy_identifier() {
			return GetRuleContext<Hierarchy_identifierContext>(0);
		}
		public Func_ptrContext func_ptr() {
			return GetRuleContext<Func_ptrContext>(0);
		}
		public OptElementContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOptElement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryExprContext : ExpressionContext {
		public ExpressionContext lval;
		public IToken opt;
		public ExpressionContext rval;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode K_MUL_OPT() { return GetToken(opene.K_MUL_OPT, 0); }
		public ITerminalNode K_DIV_OPT() { return GetToken(opene.K_DIV_OPT, 0); }
		public ITerminalNode K_FULL_DIV_OPT() { return GetToken(opene.K_FULL_DIV_OPT, 0); }
		public ITerminalNode K_MOD_OPT() { return GetToken(opene.K_MOD_OPT, 0); }
		public ITerminalNode K_ADD_OPT() { return GetToken(opene.K_ADD_OPT, 0); }
		public ITerminalNode K_SUB_OPT() { return GetToken(opene.K_SUB_OPT, 0); }
		public ITerminalNode K_NOT_EQUAL_OPT() { return GetToken(opene.K_NOT_EQUAL_OPT, 0); }
		public ITerminalNode K_EQUAL_OPT() { return GetToken(opene.K_EQUAL_OPT, 0); }
		public ITerminalNode K_AECOM_OPT() { return GetToken(opene.K_AECOM_OPT, 0); }
		public ITerminalNode K_LESS_OPT() { return GetToken(opene.K_LESS_OPT, 0); }
		public ITerminalNode K_GREAT_OPT() { return GetToken(opene.K_GREAT_OPT, 0); }
		public ITerminalNode K_LESS_EQU_OPT() { return GetToken(opene.K_LESS_EQU_OPT, 0); }
		public ITerminalNode K_GREAT_EQU_OPT() { return GetToken(opene.K_GREAT_EQU_OPT, 0); }
		public ITerminalNode K_LIKE_EQU_OPT() { return GetToken(opene.K_LIKE_EQU_OPT, 0); }
		public ITerminalNode K_AND_OPT() { return GetToken(opene.K_AND_OPT, 0); }
		public ITerminalNode K_OR_OPT() { return GetToken(opene.K_OR_OPT, 0); }
		public BinaryExprContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExprContext : ExpressionContext {
		public IToken opt;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode K_SUB_OPT() { return GetToken(opene.K_SUB_OPT, 0); }
		public UnaryExprContext(ExpressionContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 56;
		EnterRecursionRule(_localctx, 56, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 338;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACK:
				{
				_localctx = new BracketContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 326; Match(LBRACK);
				State = 327; expression(0);
				State = 328; Match(RBRACK);
				}
				break;
			case K_SUB_OPT:
				{
				_localctx = new UnaryExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 330; ((UnaryExprContext)_localctx).opt = Match(K_SUB_OPT);
				State = 331; expression(23);
				}
				break;
			case INTEGER_LITERAL:
			case FLOAT_LITERAL:
				{
				_localctx = new OptElementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 332; number();
				}
				break;
			case K_TRUE:
			case K_FALSE:
				{
				_localctx = new OptElementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 333; bool_value();
				}
				break;
			case SHARP:
				{
				_localctx = new OptElementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 334; macro_value();
				}
				break;
			case STRING_LITERAL:
				{
				_localctx = new OptElementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 335; string_value();
				}
				break;
			case IDENTIFIER:
				{
				_localctx = new OptElementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 336; hierarchy_identifier();
				}
				break;
			case ADDRESS:
				{
				_localctx = new OptElementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 337; func_ptr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 390;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 388;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
					case 1:
						{
						_localctx = new BinaryExprContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExprContext)_localctx).lval = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 340;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 341; ((BinaryExprContext)_localctx).opt = Match(K_MUL_OPT);
						State = 342; ((BinaryExprContext)_localctx).rval = expression(23);
						}
						break;
					case 2:
						{
						_localctx = new BinaryExprContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExprContext)_localctx).lval = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 343;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 344; ((BinaryExprContext)_localctx).opt = Match(K_DIV_OPT);
						State = 345; ((BinaryExprContext)_localctx).rval = expression(22);
						}
						break;
					case 3:
						{
						_localctx = new BinaryExprContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExprContext)_localctx).lval = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 346;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 347; ((BinaryExprContext)_localctx).opt = Match(K_FULL_DIV_OPT);
						State = 348; ((BinaryExprContext)_localctx).rval = expression(21);
						}
						break;
					case 4:
						{
						_localctx = new BinaryExprContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExprContext)_localctx).lval = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 349;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 350; ((BinaryExprContext)_localctx).opt = Match(K_MOD_OPT);
						State = 351; ((BinaryExprContext)_localctx).rval = expression(20);
						}
						break;
					case 5:
						{
						_localctx = new BinaryExprContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExprContext)_localctx).lval = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 352;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 353; ((BinaryExprContext)_localctx).opt = Match(K_ADD_OPT);
						State = 354; ((BinaryExprContext)_localctx).rval = expression(19);
						}
						break;
					case 6:
						{
						_localctx = new BinaryExprContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExprContext)_localctx).lval = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 355;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 356; ((BinaryExprContext)_localctx).opt = Match(K_SUB_OPT);
						State = 357; ((BinaryExprContext)_localctx).rval = expression(18);
						}
						break;
					case 7:
						{
						_localctx = new BinaryExprContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExprContext)_localctx).lval = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 358;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 359; ((BinaryExprContext)_localctx).opt = Match(K_NOT_EQUAL_OPT);
						State = 360; ((BinaryExprContext)_localctx).rval = expression(17);
						}
						break;
					case 8:
						{
						_localctx = new BinaryExprContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExprContext)_localctx).lval = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 361;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 362; ((BinaryExprContext)_localctx).opt = Match(K_EQUAL_OPT);
						State = 363; ((BinaryExprContext)_localctx).rval = expression(16);
						}
						break;
					case 9:
						{
						_localctx = new BinaryExprContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExprContext)_localctx).lval = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 364;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 365; ((BinaryExprContext)_localctx).opt = Match(K_AECOM_OPT);
						State = 366; ((BinaryExprContext)_localctx).rval = expression(15);
						}
						break;
					case 10:
						{
						_localctx = new BinaryExprContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExprContext)_localctx).lval = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 367;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 368; ((BinaryExprContext)_localctx).opt = Match(K_LESS_OPT);
						State = 369; ((BinaryExprContext)_localctx).rval = expression(14);
						}
						break;
					case 11:
						{
						_localctx = new BinaryExprContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExprContext)_localctx).lval = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 370;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 371; ((BinaryExprContext)_localctx).opt = Match(K_GREAT_OPT);
						State = 372; ((BinaryExprContext)_localctx).rval = expression(13);
						}
						break;
					case 12:
						{
						_localctx = new BinaryExprContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExprContext)_localctx).lval = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 373;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 374; ((BinaryExprContext)_localctx).opt = Match(K_LESS_EQU_OPT);
						State = 375; ((BinaryExprContext)_localctx).rval = expression(12);
						}
						break;
					case 13:
						{
						_localctx = new BinaryExprContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExprContext)_localctx).lval = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 376;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 377; ((BinaryExprContext)_localctx).opt = Match(K_GREAT_EQU_OPT);
						State = 378; ((BinaryExprContext)_localctx).rval = expression(11);
						}
						break;
					case 14:
						{
						_localctx = new BinaryExprContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExprContext)_localctx).lval = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 379;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 380; ((BinaryExprContext)_localctx).opt = Match(K_LIKE_EQU_OPT);
						State = 381; ((BinaryExprContext)_localctx).rval = expression(10);
						}
						break;
					case 15:
						{
						_localctx = new BinaryExprContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExprContext)_localctx).lval = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 382;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 383; ((BinaryExprContext)_localctx).opt = Match(K_AND_OPT);
						State = 384; ((BinaryExprContext)_localctx).rval = expression(9);
						}
						break;
					case 16:
						{
						_localctx = new BinaryExprContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExprContext)_localctx).lval = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 385;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 386; ((BinaryExprContext)_localctx).opt = Match(K_OR_OPT);
						State = 387; ((BinaryExprContext)_localctx).rval = expression(8);
						}
						break;
					}
					} 
				}
				State = 392;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,36,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Macro_valueContext : ParserRuleContext {
		public ITerminalNode SHARP() { return GetToken(opene.SHARP, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(opene.IDENTIFIER, 0); }
		public Macro_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macro_value; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMacro_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Macro_valueContext macro_value() {
		Macro_valueContext _localctx = new Macro_valueContext(Context, State);
		EnterRule(_localctx, 58, RULE_macro_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 393; Match(SHARP);
			State = 394; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_ptrContext : ParserRuleContext {
		public ITerminalNode ADDRESS() { return GetToken(opene.ADDRESS, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(opene.IDENTIFIER, 0); }
		public Func_ptrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_ptr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_ptr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_ptrContext func_ptr() {
		Func_ptrContext _localctx = new Func_ptrContext(Context, State);
		EnterRule(_localctx, 60, RULE_func_ptr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 396; Match(ADDRESS);
			State = 397; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bool_valueContext : ParserRuleContext {
		public IToken bval;
		public ITerminalNode K_TRUE() { return GetToken(opene.K_TRUE, 0); }
		public ITerminalNode K_FALSE() { return GetToken(opene.K_FALSE, 0); }
		public Bool_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bool_value; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bool_valueContext bool_value() {
		Bool_valueContext _localctx = new Bool_valueContext(Context, State);
		EnterRule(_localctx, 62, RULE_bool_value);
		try {
			State = 401;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case K_TRUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 399; _localctx.bval = Match(K_TRUE);
				}
				break;
			case K_FALSE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 400; _localctx.bval = Match(K_FALSE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumberContext : ParserRuleContext {
		public NumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_number; } }
	 
		public NumberContext() { }
		public virtual void CopyFrom(NumberContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FloatContext : NumberContext {
		public ITerminalNode FLOAT_LITERAL() { return GetToken(opene.FLOAT_LITERAL, 0); }
		public FloatContext(NumberContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntContext : NumberContext {
		public ITerminalNode INTEGER_LITERAL() { return GetToken(opene.INTEGER_LITERAL, 0); }
		public IntContext(NumberContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumberContext number() {
		NumberContext _localctx = new NumberContext(Context, State);
		EnterRule(_localctx, 64, RULE_number);
		try {
			State = 405;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER_LITERAL:
				_localctx = new IntContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 403; Match(INTEGER_LITERAL);
				}
				break;
			case FLOAT_LITERAL:
				_localctx = new FloatContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 404; Match(FLOAT_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class String_valueContext : ParserRuleContext {
		public ITerminalNode STRING_LITERAL() { return GetToken(opene.STRING_LITERAL, 0); }
		public String_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string_value; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IopeneVisitor<TResult> typedVisitor = visitor as IopeneVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public String_valueContext string_value() {
		String_valueContext _localctx = new String_valueContext(Context, State);
		EnterRule(_localctx, 66, RULE_string_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 407; Match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 27: return name_component_sempred((Name_componentContext)_localctx, predIndex);
		case 28: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool name_component_sempred(Name_componentContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 2);
		case 2: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 22);
		case 4: return Precpred(Context, 21);
		case 5: return Precpred(Context, 20);
		case 6: return Precpred(Context, 19);
		case 7: return Precpred(Context, 18);
		case 8: return Precpred(Context, 17);
		case 9: return Precpred(Context, 16);
		case 10: return Precpred(Context, 15);
		case 11: return Precpred(Context, 14);
		case 12: return Precpred(Context, 13);
		case 13: return Precpred(Context, 12);
		case 14: return Precpred(Context, 11);
		case 15: return Precpred(Context, 10);
		case 16: return Precpred(Context, 9);
		case 17: return Precpred(Context, 8);
		case 18: return Precpred(Context, 7);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ';', '\x19C', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', 'N', '\n', '\x2', 
		'\f', '\x2', '\xE', '\x2', 'Q', '\v', '\x2', '\x5', '\x2', 'S', '\n', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\\', '\n', '\x4', '\x5', 
		'\x4', '^', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x62', 
		'\n', '\x4', '\x3', '\x4', '\a', '\x4', '\x65', '\n', '\x4', '\f', '\x4', 
		'\xE', '\x4', 'h', '\v', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\a', '\a', 'p', '\n', '\a', 
		'\f', '\a', '\xE', '\a', 's', '\v', '\a', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\n', '\a', '\n', '\x80', '\n', '\n', 
		'\f', '\n', '\xE', '\n', '\x83', '\v', '\n', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x5', '\f', '\x8E', '\n', '\f', '\x5', '\f', '\x90', 
		'\n', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x94', '\n', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\r', '\a', '\r', '\x99', '\n', '\r', 
		'\f', '\r', '\xE', '\r', '\x9C', '\v', '\r', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\a', '\x12', 
		'\xA9', '\n', '\x12', '\f', '\x12', '\xE', '\x12', '\xAC', '\v', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\a', '\x12', '\xB0', '\n', '\x12', '\f', 
		'\x12', '\xE', '\x12', '\xB3', '\v', '\x12', '\a', '\x12', '\xB5', '\n', 
		'\x12', '\f', '\x12', '\xE', '\x12', '\xB8', '\v', '\x12', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\xBE', '\n', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\xC2', '\n', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\xC6', '\n', '\x13', '\x5', 
		'\x13', '\xC8', '\n', '\x13', '\x5', '\x13', '\xCA', '\n', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\a', '\x13', '\xCF', '\n', '\x13', 
		'\f', '\x13', '\xE', '\x13', '\xD2', '\v', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x14', '\a', '\x14', '\xD7', '\n', '\x14', '\f', '\x14', 
		'\xE', '\x14', '\xDA', '\v', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x5', 
		'\x17', '\xE3', '\n', '\x17', '\x3', '\x17', '\a', '\x17', '\xE6', '\n', 
		'\x17', '\f', '\x17', '\xE', '\x17', '\xE9', '\v', '\x17', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x5', '\x18', '\xF2', '\n', '\x18', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\x102', '\n', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', 
		'\x3', '\x19', '\x5', '\x19', '\x10A', '\n', '\x19', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', 
		'\x1A', '\x112', '\n', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1A', '\x5', '\x1A', '\x11D', '\n', '\x1A', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\a', 
		'\x1C', '\x125', '\n', '\x1C', '\f', '\x1C', '\xE', '\x1C', '\x128', '\v', 
		'\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x135', '\n', '\x1D', '\a', '\x1D', 
		'\x137', '\n', '\x1D', '\f', '\x1D', '\xE', '\x1D', '\x13A', '\v', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', 
		'\x3', '\x1D', '\x3', '\x1D', '\a', '\x1D', '\x143', '\n', '\x1D', '\f', 
		'\x1D', '\xE', '\x1D', '\x146', '\v', '\x1D', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x5', '\x1E', '\x155', '\n', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\a', '\x1E', '\x187', '\n', '\x1E', '\f', '\x1E', 
		'\xE', '\x1E', '\x18A', '\v', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x5', 
		'!', '\x194', '\n', '!', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x198', 
		'\n', '\"', '\x3', '#', '\x3', '#', '\x3', '#', '\x2', '\x4', '\x38', 
		':', '$', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', 
		'@', '\x42', '\x44', '\x2', '\x4', '\x5', '\x2', '(', '(', '\x33', '\x33', 
		'\x37', '\x37', '\x3', '\x2', '\x1D', '\x1E', '\x2', '\x1B7', '\x2', 'R', 
		'\x3', '\x2', '\x2', '\x2', '\x4', 'T', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'W', '\x3', '\x2', '\x2', '\x2', '\b', 'i', '\x3', '\x2', '\x2', '\x2', 
		'\n', 'k', '\x3', '\x2', '\x2', '\x2', '\f', 'q', '\x3', '\x2', '\x2', 
		'\x2', '\xE', 't', '\x3', '\x2', '\x2', '\x2', '\x10', 'x', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\x81', '\x3', '\x2', '\x2', '\x2', '\x14', '\x84', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\x87', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x9D', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xA1', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\xA3', '\x3', '\x2', '\x2', '\x2', '\"', 
		'\xB6', '\x3', '\x2', '\x2', '\x2', '$', '\xB9', '\x3', '\x2', '\x2', 
		'\x2', '&', '\xD8', '\x3', '\x2', '\x2', '\x2', '(', '\xDB', '\x3', '\x2', 
		'\x2', '\x2', '*', '\xDE', '\x3', '\x2', '\x2', '\x2', ',', '\xE7', '\x3', 
		'\x2', '\x2', '\x2', '.', '\xF1', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'\x109', '\x3', '\x2', '\x2', '\x2', '\x32', '\x11C', '\x3', '\x2', '\x2', 
		'\x2', '\x34', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x36', '\x121', '\x3', 
		'\x2', '\x2', '\x2', '\x38', '\x129', '\x3', '\x2', '\x2', '\x2', ':', 
		'\x154', '\x3', '\x2', '\x2', '\x2', '<', '\x18B', '\x3', '\x2', '\x2', 
		'\x2', '>', '\x18E', '\x3', '\x2', '\x2', '\x2', '@', '\x193', '\x3', 
		'\x2', '\x2', '\x2', '\x42', '\x197', '\x3', '\x2', '\x2', '\x2', '\x44', 
		'\x199', '\x3', '\x2', '\x2', '\x2', '\x46', 'G', '\x5', '\x4', '\x3', 
		'\x2', 'G', 'H', '\a', '\x35', '\x2', '\x2', 'H', 'I', '\x5', '\f', '\a', 
		'\x2', 'I', 'J', '\x5', '\x10', '\t', '\x2', 'J', 'S', '\x3', '\x2', '\x2', 
		'\x2', 'K', 'O', '\x5', '\x4', '\x3', '\x2', 'L', 'N', '\x5', '\x6', '\x4', 
		'\x2', 'M', 'L', '\x3', '\x2', '\x2', '\x2', 'N', 'Q', '\x3', '\x2', '\x2', 
		'\x2', 'O', 'M', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\x3', '\x2', '\x2', 
		'\x2', 'P', 'S', '\x3', '\x2', '\x2', '\x2', 'Q', 'O', '\x3', '\x2', '\x2', 
		'\x2', 'R', '\x46', '\x3', '\x2', '\x2', '\x2', 'R', 'K', '\x3', '\x2', 
		'\x2', '\x2', 'S', '\x3', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\a', 
		'\x3', '\x2', '\x2', 'U', 'V', '\a', '\x31', '\x2', '\x2', 'V', '\x5', 
		'\x3', '\x2', '\x2', '\x2', 'W', 'X', '\a', '\v', '\x2', '\x2', 'X', ']', 
		'\a', '\x33', '\x2', '\x2', 'Y', '[', '\a', '(', '\x2', '\x2', 'Z', '\\', 
		'\x5', '\b', '\x5', '\x2', '[', 'Z', '\x3', '\x2', '\x2', '\x2', '[', 
		'\\', '\x3', '\x2', '\x2', '\x2', '\\', '^', '\x3', '\x2', '\x2', '\x2', 
		']', 'Y', '\x3', '\x2', '\x2', '\x2', ']', '^', '\x3', '\x2', '\x2', '\x2', 
		'^', '\x61', '\x3', '\x2', '\x2', '\x2', '_', '`', '\a', '(', '\x2', '\x2', 
		'`', '\x62', '\x5', '\x18', '\r', '\x2', '\x61', '_', '\x3', '\x2', '\x2', 
		'\x2', '\x61', '\x62', '\x3', '\x2', '\x2', '\x2', '\x62', '\x66', '\x3', 
		'\x2', '\x2', '\x2', '\x63', '\x65', '\x5', '\n', '\x6', '\x2', '\x64', 
		'\x63', '\x3', '\x2', '\x2', '\x2', '\x65', 'h', '\x3', '\x2', '\x2', 
		'\x2', '\x66', '\x64', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\x3', 
		'\x2', '\x2', '\x2', 'g', '\a', '\x3', '\x2', '\x2', '\x2', 'h', '\x66', 
		'\x3', '\x2', '\x2', '\x2', 'i', 'j', '\a', '\x33', '\x2', '\x2', 'j', 
		'\t', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\a', '\b', '\x2', '\x2', 
		'l', 'm', '\x5', '\x16', '\f', '\x2', 'm', '\v', '\x3', '\x2', '\x2', 
		'\x2', 'n', 'p', '\x5', '\xE', '\b', '\x2', 'o', 'n', '\x3', '\x2', '\x2', 
		'\x2', 'p', 's', '\x3', '\x2', '\x2', '\x2', 'q', 'o', '\x3', '\x2', '\x2', 
		'\x2', 'q', 'r', '\x3', '\x2', '\x2', '\x2', 'r', '\r', '\x3', '\x2', 
		'\x2', '\x2', 's', 'q', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\a', '\x4', 
		'\x2', '\x2', 'u', 'v', '\a', '\x33', '\x2', '\x2', 'v', 'w', '\a', '\x35', 
		'\x2', '\x2', 'w', '\xF', '\x3', '\x2', '\x2', '\x2', 'x', 'y', '\a', 
		'\x5', '\x2', '\x2', 'y', 'z', '\a', '\x39', '\x2', '\x2', 'z', '{', '\a', 
		'\x38', '\x2', '\x2', '{', '|', '\x5', '\x12', '\n', '\x2', '|', '}', 
		'\x5', '\"', '\x12', '\x2', '}', '\x11', '\x3', '\x2', '\x2', '\x2', '~', 
		'\x80', '\x5', '\x14', '\v', '\x2', '\x7F', '~', '\x3', '\x2', '\x2', 
		'\x2', '\x80', '\x83', '\x3', '\x2', '\x2', '\x2', '\x81', '\x7F', '\x3', 
		'\x2', '\x2', '\x2', '\x81', '\x82', '\x3', '\x2', '\x2', '\x2', '\x82', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x83', '\x81', '\x3', '\x2', '\x2', 
		'\x2', '\x84', '\x85', '\a', '\x6', '\x2', '\x2', '\x85', '\x86', '\x5', 
		'\x16', '\f', '\x2', '\x86', '\x15', '\x3', '\x2', '\x2', '\x2', '\x87', 
		'\x88', '\a', '\x39', '\x2', '\x2', '\x88', '\x89', '\a', ';', '\x2', 
		'\x2', '\x89', '\x8F', '\a', '\x39', '\x2', '\x2', '\x8A', '\x8B', '\a', 
		';', '\x2', '\x2', '\x8B', '\x8D', '\a', ';', '\x2', '\x2', '\x8C', '\x8E', 
		'\a', '\x39', '\x2', '\x2', '\x8D', '\x8C', '\x3', '\x2', '\x2', '\x2', 
		'\x8D', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x90', '\x3', '\x2', 
		'\x2', '\x2', '\x8F', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', 
		'\x3', '\x2', '\x2', '\x2', '\x90', '\x93', '\x3', '\x2', '\x2', '\x2', 
		'\x91', '\x92', '\a', ';', '\x2', '\x2', '\x92', '\x94', '\a', '\x39', 
		'\x2', '\x2', '\x93', '\x91', '\x3', '\x2', '\x2', '\x2', '\x93', '\x94', 
		'\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\x3', '\x2', '\x2', '\x2', 
		'\x95', '\x96', '\a', '\x38', '\x2', '\x2', '\x96', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\x97', '\x99', '\x5', '\x1A', '\xE', '\x2', '\x98', '\x97', 
		'\x3', '\x2', '\x2', '\x2', '\x99', '\x9C', '\x3', '\x2', '\x2', '\x2', 
		'\x9A', '\x98', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', '\x3', '\x2', 
		'\x2', '\x2', '\x9B', '\x19', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9A', 
		'\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', '\t', '\x2', '\x2', '\x2', 
		'\x9E', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', '\a', '\x33', 
		'\x2', '\x2', '\xA0', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA2', 
		'\a', '\x33', '\x2', '\x2', '\xA2', '\x1F', '\x3', '\x2', '\x2', '\x2', 
		'\xA3', '\xA4', '\a', '/', '\x2', '\x2', '\xA4', '\xA5', '\a', '\x31', 
		'\x2', '\x2', '\xA5', '\xA6', '\a', '/', '\x2', '\x2', '\xA6', '!', '\x3', 
		'\x2', '\x2', '\x2', '\xA7', '\xA9', '\a', '\x35', '\x2', '\x2', '\xA8', 
		'\xA7', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAC', '\x3', '\x2', '\x2', 
		'\x2', '\xAA', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAB', '\x3', 
		'\x2', '\x2', '\x2', '\xAB', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAC', 
		'\xAA', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xB1', '\x5', '$', '\x13', 
		'\x2', '\xAE', '\xB0', '\a', '\x35', '\x2', '\x2', '\xAF', '\xAE', '\x3', 
		'\x2', '\x2', '\x2', '\xB0', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB1', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', '\x3', '\x2', '\x2', 
		'\x2', '\xB2', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB1', '\x3', 
		'\x2', '\x2', '\x2', '\xB4', '\xAA', '\x3', '\x2', '\x2', '\x2', '\xB5', 
		'\xB8', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB4', '\x3', '\x2', '\x2', 
		'\x2', '\xB6', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xB7', '#', '\x3', 
		'\x2', '\x2', '\x2', '\xB8', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB9', 
		'\xBA', '\a', '\n', '\x2', '\x2', '\xBA', '\xC9', '\a', '\x39', '\x2', 
		'\x2', '\xBB', '\xBD', '\a', ';', '\x2', '\x2', '\xBC', '\xBE', '\a', 
		'\x39', '\x2', '\x2', '\xBD', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBD', 
		'\xBE', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xC7', '\x3', '\x2', '\x2', 
		'\x2', '\xBF', '\xC1', '\a', ';', '\x2', '\x2', '\xC0', '\xC2', '\a', 
		'\x39', '\x2', '\x2', '\xC1', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC1', 
		'\xC2', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC5', '\x3', '\x2', '\x2', 
		'\x2', '\xC3', '\xC4', '\a', ';', '\x2', '\x2', '\xC4', '\xC6', '\a', 
		'\x39', '\x2', '\x2', '\xC5', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC5', 
		'\xC6', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC8', '\x3', '\x2', '\x2', 
		'\x2', '\xC7', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xC7', '\xC8', '\x3', 
		'\x2', '\x2', '\x2', '\xC8', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xC9', 
		'\xBB', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCA', '\x3', '\x2', '\x2', 
		'\x2', '\xCA', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCC', '\a', 
		'\x38', '\x2', '\x2', '\xCC', '\xD0', '\x5', '&', '\x14', '\x2', '\xCD', 
		'\xCF', '\x5', '*', '\x16', '\x2', '\xCE', '\xCD', '\x3', '\x2', '\x2', 
		'\x2', '\xCF', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD0', '\xCE', '\x3', 
		'\x2', '\x2', '\x2', '\xD0', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD1', 
		'\xD3', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD0', '\x3', '\x2', '\x2', 
		'\x2', '\xD3', '\xD4', '\x5', ',', '\x17', '\x2', '\xD4', '%', '\x3', 
		'\x2', '\x2', '\x2', '\xD5', '\xD7', '\x5', '(', '\x15', '\x2', '\xD6', 
		'\xD5', '\x3', '\x2', '\x2', '\x2', '\xD7', '\xDA', '\x3', '\x2', '\x2', 
		'\x2', '\xD8', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD9', '\x3', 
		'\x2', '\x2', '\x2', '\xD9', '\'', '\x3', '\x2', '\x2', '\x2', '\xDA', 
		'\xD8', '\x3', '\x2', '\x2', '\x2', '\xDB', '\xDC', '\a', '\t', '\x2', 
		'\x2', '\xDC', '\xDD', '\x5', '\x16', '\f', '\x2', '\xDD', ')', '\x3', 
		'\x2', '\x2', '\x2', '\xDE', '\xDF', '\a', '\a', '\x2', '\x2', '\xDF', 
		'\xE0', '\x5', '\x16', '\f', '\x2', '\xE0', '+', '\x3', '\x2', '\x2', 
		'\x2', '\xE1', '\xE3', '\x5', '.', '\x18', '\x2', '\xE2', '\xE1', '\x3', 
		'\x2', '\x2', '\x2', '\xE2', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE3', 
		'\xE4', '\x3', '\x2', '\x2', '\x2', '\xE4', '\xE6', '\a', '\x35', '\x2', 
		'\x2', '\xE5', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE9', '\x3', 
		'\x2', '\x2', '\x2', '\xE7', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE7', 
		'\xE8', '\x3', '\x2', '\x2', '\x2', '\xE8', '-', '\x3', '\x2', '\x2', 
		'\x2', '\xE9', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xF2', '\x5', 
		'\x32', '\x1A', '\x2', '\xEB', '\xEC', '\x5', '\x36', '\x1C', '\x2', '\xEC', 
		'\xED', '\t', '\x3', '\x2', '\x2', '\xED', '\xEE', '\x5', ':', '\x1E', 
		'\x2', '\xEE', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF2', '\x5', 
		':', '\x1E', '\x2', '\xF0', '\xF2', '\x5', '\x30', '\x19', '\x2', '\xF1', 
		'\xEA', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xEB', '\x3', '\x2', '\x2', 
		'\x2', '\xF1', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF0', '\x3', 
		'\x2', '\x2', '\x2', '\xF2', '/', '\x3', '\x2', '\x2', '\x2', '\xF3', 
		'\xF4', '\a', '\x11', '\x2', '\x2', '\xF4', '\xF5', '\a', ')', '\x2', 
		'\x2', '\xF5', '\xF6', '\x5', ':', '\x1E', '\x2', '\xF6', '\xF7', '\a', 
		'*', '\x2', '\x2', '\xF7', '\xF8', '\x5', ',', '\x17', '\x2', '\xF8', 
		'\xF9', '\a', '\x12', '\x2', '\x2', '\xF9', '\xFA', '\a', ')', '\x2', 
		'\x2', '\xFA', '\xFB', '\a', '*', '\x2', '\x2', '\xFB', '\x10A', '\x3', 
		'\x2', '\x2', '\x2', '\xFC', '\xFD', '\a', '\x13', '\x2', '\x2', '\xFD', 
		'\xFE', '\a', ')', '\x2', '\x2', '\xFE', '\xFF', '\x5', ':', '\x1E', '\x2', 
		'\xFF', '\x101', '\a', '(', '\x2', '\x2', '\x100', '\x102', '\a', '\x33', 
		'\x2', '\x2', '\x101', '\x100', '\x3', '\x2', '\x2', '\x2', '\x101', '\x102', 
		'\x3', '\x2', '\x2', '\x2', '\x102', '\x103', '\x3', '\x2', '\x2', '\x2', 
		'\x103', '\x104', '\a', '*', '\x2', '\x2', '\x104', '\x105', '\x5', ',', 
		'\x17', '\x2', '\x105', '\x106', '\a', '\x14', '\x2', '\x2', '\x106', 
		'\x107', '\a', ')', '\x2', '\x2', '\x107', '\x108', '\a', '*', '\x2', 
		'\x2', '\x108', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x109', '\xF3', 
		'\x3', '\x2', '\x2', '\x2', '\x109', '\xFC', '\x3', '\x2', '\x2', '\x2', 
		'\x10A', '\x31', '\x3', '\x2', '\x2', '\x2', '\x10B', '\x10C', '\a', '\xE', 
		'\x2', '\x2', '\x10C', '\x10D', '\a', ')', '\x2', '\x2', '\x10D', '\x10E', 
		'\x5', ':', '\x1E', '\x2', '\x10E', '\x10F', '\a', '*', '\x2', '\x2', 
		'\x10F', '\x111', '\x5', ',', '\x17', '\x2', '\x110', '\x112', '\x5', 
		'\x34', '\x1B', '\x2', '\x111', '\x110', '\x3', '\x2', '\x2', '\x2', '\x111', 
		'\x112', '\x3', '\x2', '\x2', '\x2', '\x112', '\x113', '\x3', '\x2', '\x2', 
		'\x2', '\x113', '\x114', '\a', '\x10', '\x2', '\x2', '\x114', '\x11D', 
		'\x3', '\x2', '\x2', '\x2', '\x115', '\x116', '\a', '\f', '\x2', '\x2', 
		'\x116', '\x117', '\a', ')', '\x2', '\x2', '\x117', '\x118', '\x5', ':', 
		'\x1E', '\x2', '\x118', '\x119', '\a', '*', '\x2', '\x2', '\x119', '\x11A', 
		'\x5', ',', '\x17', '\x2', '\x11A', '\x11B', '\a', '\r', '\x2', '\x2', 
		'\x11B', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x10B', '\x3', 
		'\x2', '\x2', '\x2', '\x11C', '\x115', '\x3', '\x2', '\x2', '\x2', '\x11D', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x11F', '\a', '\xF', '\x2', 
		'\x2', '\x11F', '\x120', '\x5', ',', '\x17', '\x2', '\x120', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x121', '\x126', '\x5', '\x38', '\x1D', '\x2', '\x122', 
		'\x123', '\a', '\x30', '\x2', '\x2', '\x123', '\x125', '\x5', '\x38', 
		'\x1D', '\x2', '\x124', '\x122', '\x3', '\x2', '\x2', '\x2', '\x125', 
		'\x128', '\x3', '\x2', '\x2', '\x2', '\x126', '\x124', '\x3', '\x2', '\x2', 
		'\x2', '\x126', '\x127', '\x3', '\x2', '\x2', '\x2', '\x127', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\x128', '\x126', '\x3', '\x2', '\x2', '\x2', 
		'\x129', '\x12A', '\b', '\x1D', '\x1', '\x2', '\x12A', '\x12B', '\a', 
		'\x33', '\x2', '\x2', '\x12B', '\x144', '\x3', '\x2', '\x2', '\x2', '\x12C', 
		'\x12D', '\f', '\x5', '\x2', '\x2', '\x12D', '\x12E', '\a', ')', '\x2', 
		'\x2', '\x12E', '\x143', '\a', '*', '\x2', '\x2', '\x12F', '\x130', '\f', 
		'\x4', '\x2', '\x2', '\x130', '\x131', '\a', ')', '\x2', '\x2', '\x131', 
		'\x138', '\x5', ':', '\x1E', '\x2', '\x132', '\x134', '\a', '(', '\x2', 
		'\x2', '\x133', '\x135', '\x5', ':', '\x1E', '\x2', '\x134', '\x133', 
		'\x3', '\x2', '\x2', '\x2', '\x134', '\x135', '\x3', '\x2', '\x2', '\x2', 
		'\x135', '\x137', '\x3', '\x2', '\x2', '\x2', '\x136', '\x132', '\x3', 
		'\x2', '\x2', '\x2', '\x137', '\x13A', '\x3', '\x2', '\x2', '\x2', '\x138', 
		'\x136', '\x3', '\x2', '\x2', '\x2', '\x138', '\x139', '\x3', '\x2', '\x2', 
		'\x2', '\x139', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x138', 
		'\x3', '\x2', '\x2', '\x2', '\x13B', '\x13C', '\a', '*', '\x2', '\x2', 
		'\x13C', '\x143', '\x3', '\x2', '\x2', '\x2', '\x13D', '\x13E', '\f', 
		'\x3', '\x2', '\x2', '\x13E', '\x13F', '\a', '+', '\x2', '\x2', '\x13F', 
		'\x140', '\x5', ':', '\x1E', '\x2', '\x140', '\x141', '\a', ',', '\x2', 
		'\x2', '\x141', '\x143', '\x3', '\x2', '\x2', '\x2', '\x142', '\x12C', 
		'\x3', '\x2', '\x2', '\x2', '\x142', '\x12F', '\x3', '\x2', '\x2', '\x2', 
		'\x142', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x143', '\x146', '\x3', 
		'\x2', '\x2', '\x2', '\x144', '\x142', '\x3', '\x2', '\x2', '\x2', '\x144', 
		'\x145', '\x3', '\x2', '\x2', '\x2', '\x145', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '\x146', '\x144', '\x3', '\x2', '\x2', '\x2', '\x147', '\x148', 
		'\b', '\x1E', '\x1', '\x2', '\x148', '\x149', '\a', ')', '\x2', '\x2', 
		'\x149', '\x14A', '\x5', ':', '\x1E', '\x2', '\x14A', '\x14B', '\a', '*', 
		'\x2', '\x2', '\x14B', '\x155', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x14D', 
		'\a', '\x18', '\x2', '\x2', '\x14D', '\x155', '\x5', ':', '\x1E', '\x19', 
		'\x14E', '\x155', '\x5', '\x42', '\"', '\x2', '\x14F', '\x155', '\x5', 
		'@', '!', '\x2', '\x150', '\x155', '\x5', '<', '\x1F', '\x2', '\x151', 
		'\x155', '\x5', '\x44', '#', '\x2', '\x152', '\x155', '\x5', '\x36', '\x1C', 
		'\x2', '\x153', '\x155', '\x5', '>', ' ', '\x2', '\x154', '\x147', '\x3', 
		'\x2', '\x2', '\x2', '\x154', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x154', 
		'\x14E', '\x3', '\x2', '\x2', '\x2', '\x154', '\x14F', '\x3', '\x2', '\x2', 
		'\x2', '\x154', '\x150', '\x3', '\x2', '\x2', '\x2', '\x154', '\x151', 
		'\x3', '\x2', '\x2', '\x2', '\x154', '\x152', '\x3', '\x2', '\x2', '\x2', 
		'\x154', '\x153', '\x3', '\x2', '\x2', '\x2', '\x155', '\x188', '\x3', 
		'\x2', '\x2', '\x2', '\x156', '\x157', '\f', '\x18', '\x2', '\x2', '\x157', 
		'\x158', '\a', '\x19', '\x2', '\x2', '\x158', '\x187', '\x5', ':', '\x1E', 
		'\x19', '\x159', '\x15A', '\f', '\x17', '\x2', '\x2', '\x15A', '\x15B', 
		'\a', '\x1A', '\x2', '\x2', '\x15B', '\x187', '\x5', ':', '\x1E', '\x18', 
		'\x15C', '\x15D', '\f', '\x16', '\x2', '\x2', '\x15D', '\x15E', '\a', 
		'\x1B', '\x2', '\x2', '\x15E', '\x187', '\x5', ':', '\x1E', '\x17', '\x15F', 
		'\x160', '\f', '\x15', '\x2', '\x2', '\x160', '\x161', '\a', '\x1C', '\x2', 
		'\x2', '\x161', '\x187', '\x5', ':', '\x1E', '\x16', '\x162', '\x163', 
		'\f', '\x14', '\x2', '\x2', '\x163', '\x164', '\a', '\x17', '\x2', '\x2', 
		'\x164', '\x187', '\x5', ':', '\x1E', '\x15', '\x165', '\x166', '\f', 
		'\x13', '\x2', '\x2', '\x166', '\x167', '\a', '\x18', '\x2', '\x2', '\x167', 
		'\x187', '\x5', ':', '\x1E', '\x14', '\x168', '\x169', '\f', '\x12', '\x2', 
		'\x2', '\x169', '\x16A', '\a', ' ', '\x2', '\x2', '\x16A', '\x187', '\x5', 
		':', '\x1E', '\x13', '\x16B', '\x16C', '\f', '\x11', '\x2', '\x2', '\x16C', 
		'\x16D', '\a', '\x1F', '\x2', '\x2', '\x16D', '\x187', '\x5', ':', '\x1E', 
		'\x12', '\x16E', '\x16F', '\f', '\x10', '\x2', '\x2', '\x16F', '\x170', 
		'\a', '\x1D', '\x2', '\x2', '\x170', '\x187', '\x5', ':', '\x1E', '\x11', 
		'\x171', '\x172', '\f', '\xF', '\x2', '\x2', '\x172', '\x173', '\a', '\"', 
		'\x2', '\x2', '\x173', '\x187', '\x5', ':', '\x1E', '\x10', '\x174', '\x175', 
		'\f', '\xE', '\x2', '\x2', '\x175', '\x176', '\a', '!', '\x2', '\x2', 
		'\x176', '\x187', '\x5', ':', '\x1E', '\xF', '\x177', '\x178', '\f', '\r', 
		'\x2', '\x2', '\x178', '\x179', '\a', '$', '\x2', '\x2', '\x179', '\x187', 
		'\x5', ':', '\x1E', '\xE', '\x17A', '\x17B', '\f', '\f', '\x2', '\x2', 
		'\x17B', '\x17C', '\a', '#', '\x2', '\x2', '\x17C', '\x187', '\x5', ':', 
		'\x1E', '\r', '\x17D', '\x17E', '\f', '\v', '\x2', '\x2', '\x17E', '\x17F', 
		'\a', '%', '\x2', '\x2', '\x17F', '\x187', '\x5', ':', '\x1E', '\f', '\x180', 
		'\x181', '\f', '\n', '\x2', '\x2', '\x181', '\x182', '\a', '\'', '\x2', 
		'\x2', '\x182', '\x187', '\x5', ':', '\x1E', '\v', '\x183', '\x184', '\f', 
		'\t', '\x2', '\x2', '\x184', '\x185', '\a', '&', '\x2', '\x2', '\x185', 
		'\x187', '\x5', ':', '\x1E', '\n', '\x186', '\x156', '\x3', '\x2', '\x2', 
		'\x2', '\x186', '\x159', '\x3', '\x2', '\x2', '\x2', '\x186', '\x15C', 
		'\x3', '\x2', '\x2', '\x2', '\x186', '\x15F', '\x3', '\x2', '\x2', '\x2', 
		'\x186', '\x162', '\x3', '\x2', '\x2', '\x2', '\x186', '\x165', '\x3', 
		'\x2', '\x2', '\x2', '\x186', '\x168', '\x3', '\x2', '\x2', '\x2', '\x186', 
		'\x16B', '\x3', '\x2', '\x2', '\x2', '\x186', '\x16E', '\x3', '\x2', '\x2', 
		'\x2', '\x186', '\x171', '\x3', '\x2', '\x2', '\x2', '\x186', '\x174', 
		'\x3', '\x2', '\x2', '\x2', '\x186', '\x177', '\x3', '\x2', '\x2', '\x2', 
		'\x186', '\x17A', '\x3', '\x2', '\x2', '\x2', '\x186', '\x17D', '\x3', 
		'\x2', '\x2', '\x2', '\x186', '\x180', '\x3', '\x2', '\x2', '\x2', '\x186', 
		'\x183', '\x3', '\x2', '\x2', '\x2', '\x187', '\x18A', '\x3', '\x2', '\x2', 
		'\x2', '\x188', '\x186', '\x3', '\x2', '\x2', '\x2', '\x188', '\x189', 
		'\x3', '\x2', '\x2', '\x2', '\x189', ';', '\x3', '\x2', '\x2', '\x2', 
		'\x18A', '\x188', '\x3', '\x2', '\x2', '\x2', '\x18B', '\x18C', '\a', 
		'-', '\x2', '\x2', '\x18C', '\x18D', '\a', '\x33', '\x2', '\x2', '\x18D', 
		'=', '\x3', '\x2', '\x2', '\x2', '\x18E', '\x18F', '\a', '.', '\x2', '\x2', 
		'\x18F', '\x190', '\a', '\x33', '\x2', '\x2', '\x190', '?', '\x3', '\x2', 
		'\x2', '\x2', '\x191', '\x194', '\a', '\x15', '\x2', '\x2', '\x192', '\x194', 
		'\a', '\x16', '\x2', '\x2', '\x193', '\x191', '\x3', '\x2', '\x2', '\x2', 
		'\x193', '\x192', '\x3', '\x2', '\x2', '\x2', '\x194', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x195', '\x198', '\a', '\x31', '\x2', '\x2', '\x196', 
		'\x198', '\a', '\x32', '\x2', '\x2', '\x197', '\x195', '\x3', '\x2', '\x2', 
		'\x2', '\x197', '\x196', '\x3', '\x2', '\x2', '\x2', '\x198', '\x43', 
		'\x3', '\x2', '\x2', '\x2', '\x199', '\x19A', '\a', '\x36', '\x2', '\x2', 
		'\x19A', '\x45', '\x3', '\x2', '\x2', '\x2', ')', 'O', 'R', '[', ']', 
		'\x61', '\x66', 'q', '\x81', '\x8D', '\x8F', '\x93', '\x9A', '\xAA', '\xB1', 
		'\xB6', '\xBD', '\xC1', '\xC5', '\xC7', '\xC9', '\xD0', '\xD8', '\xE2', 
		'\xE7', '\xF1', '\x101', '\x109', '\x111', '\x11C', '\x126', '\x134', 
		'\x138', '\x142', '\x144', '\x154', '\x186', '\x188', '\x193', '\x197',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
