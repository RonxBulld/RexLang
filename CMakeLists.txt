
CMAKE_MINIMUM_REQUIRED(VERSION 3.7.2)
PROJECT(OpenELanguage CXX)
SET(CMAKE_CXX_STANDARD 17)

######################################
# 配置 ANTLR4 运行时库路径
######################################

SET(ANTLR4CPP_RUNTIME_INCLUDE_DIR "${PROJECT_SOURCE_DIR}/sysroot/include/antlr4-runtime")
INCLUDE_DIRECTORIES(${ANTLR4CPP_RUNTIME_INCLUDE_DIR})
SET(ANTLR4CPP_RUNTIME_LIBRARIES_DIR "${PROJECT_SOURCE_DIR}/sysroot/lib")
LINK_DIRECTORIES(${ANTLR4CPP_RUNTIME_LIBRARIES_DIR})

######################################
# 配置输出文件路径
######################################

SET(OUTPUT_DIR "${PROJECT_SOURCE_DIR}/sysroot")
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${OUTPUT_DIR}/lib")
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${OUTPUT_DIR}/lib")
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${OUTPUT_DIR}/bin")
SET(CMAKE_INCLUDE_OUTPUT_DIRECTORY "${OUTPUT_DIR}/include")

FILE(MAKE_DIRECTORY ${OUTPUT_DIR})
FILE(MAKE_DIRECTORY ${CMAKE_ARCHIVE_OUTPUT_DIRECTORY})
FILE(MAKE_DIRECTORY ${CMAKE_LIBRARY_OUTPUT_DIRECTORY})
FILE(MAKE_DIRECTORY ${CMAKE_RUNTIME_OUTPUT_DIRECTORY})
FILE(MAKE_DIRECTORY ${CMAKE_INCLUDE_OUTPUT_DIRECTORY})

######################################
# 配置编译器选项
######################################

if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    # using Clang
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -ggdb -g -O0")
    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,-rpath,'$$ORIGIN/../lib/:$ORIGIN/../lib/'" )
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    # using GCC
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -ggdb -g -O0")
    SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,-rpath,'$$ORIGIN/../lib/:$ORIGIN/../lib/'" )
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "Intel")
    # using Intel C++
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    # using Visual Studio C++
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /utf-8")

    SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG            "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}")
    SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE          "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}")
    SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO   "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}")
    SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL       "${CMAKE_RUNTIME_OUTPUT_DIRECTORY}")

    SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG            "${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}")
    SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE          "${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}")
    SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO   "${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}")
    SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_MINSIZEREL       "${CMAKE_ARCHIVE_OUTPUT_DIRECTORY}")

    SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG            "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}")
    SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE          "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}")
    SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO   "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}")
    SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_MINSIZEREL       "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}")
endif ()

######################################
# 配置子模块
######################################

ADD_SUBDIRECTORY(lite_util)
ADD_SUBDIRECTORY(Compiler)
ADD_SUBDIRECTORY(corelib)

ADD_CUSTOM_TARGET(OpenELanguage)
ADD_DEPENDENCIES(OpenELanguage oel corelib)

enable_testing()
SET(TESTSUIT_SOURCES_DIRECTORY ${PROJECT_SOURCE_DIR}/oe_test/)
ADD_SUBDIRECTORY(oe_test)
